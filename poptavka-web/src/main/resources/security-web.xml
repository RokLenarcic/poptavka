<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">

	<!--
		Note: forcing eager session creation in
		HttpSessionContextIntegrationFilter to ensure that session cookie is
		set at the completion of the authenticate call.
	-->
    <security:http auto-config="true" entry-point-ref="customAuthenticationEntryPoint" create-session="always">
        <!-- URL patterns that require Authentication by particular roles -->
        <security:intercept-url pattern="/poptavka/service/rpc" access="IS_AUTHENTICATED_FULLY" />
        <security:intercept-url pattern="/poptavka/service/clientdemandsmodule" access="ROLE_CLIENT" />
        <security:intercept-url pattern="/poptavka/service/supplierdemandsmodule" access="ROLE_SUPPLIER" />
        <security:intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <security:intercept-url pattern="/**/*.html" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <!--    
            If the user is authorized, he will be redirected to the success-handler.
            The sucess-handler is responsible of interpreting what to do next.
            Same principle with the failure-handler
        -->
        <security:form-login authentication-success-handler-ref="customAuthenticationSuccessHandler"
                             authentication-failure-handler-ref="customAuthenticationFailureHandler" />
        <security:logout success-handler-ref="logoutSuccessHandler" />
        <security:custom-filter before="CONCURRENT_SESSION_FILTER" ref="XSRFAttackFilter" />
    </security:http>

    <bean id="XSRFAttackFilter" class="com.eprovement.poptavka.server.security.XSRFAttackFilter" />

    <!--Service -->
    <context:annotation-config/>
    <context:spring-configured/>

    <!-- Secure all beans loaded into the ApplicationContext -->
    <security:global-method-security secured-annotations="enabled" mode="aspectj"/>

    <bean id="customAuthenticationProvider" class="com.eprovement.poptavka.server.security.PoptavkaAuthenticationProvider" >
        <constructor-arg ref="loginService"/>
    </bean>

    <!-- Use this entry point to signal to the GWT-caller that the user needs to log in to access the resource-->
    <bean id="customAuthenticationEntryPoint" class="com.eprovement.poptavka.server.security.PoptavkaAuthenticationEntryPoint" />
    <bean id="customAuthenticationSuccessHandler" class="com.eprovement.poptavka.server.security.PoptavkaAuthenticationSuccessHandler" />
    <bean id="customAuthenticationFailureHandler" class="com.eprovement.poptavka.server.security.PoptavkaAuthenticationFailureHandler" />
    <bean id="logoutSuccessHandler" class="com.eprovement.poptavka.server.security.PoptavkaLogoutSuccessHandler" />
    <!-- Automatically receives AuthenticationEvent messages -->
   <bean id="poptavkaAuthListener" class="com.eprovement.poptavka.server.security.PoptavkaAuthListener"/>

    <security:authentication-manager alias="authenticationManagerAlias">
        <security:authentication-provider ref="customAuthenticationProvider" />
    </security:authentication-manager>

</beans>
