Index: src/main/java/cz/poptavka/sample/server/service/message/MessageRPCServiceImpl.java
===================================================================
--- src/main/java/cz/poptavka/sample/server/service/message/MessageRPCServiceImpl.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/server/service/message/MessageRPCServiceImpl.java	(working copy)
@@ -42,7 +42,10 @@
 import cz.poptavka.sample.shared.domain.message.PotentialDemandMessage;
 import cz.poptavka.sample.shared.domain.message.UserMessageDetail;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.TreeMap;
+import org.springframework.transaction.annotation.Propagation;
+import org.springframework.transaction.annotation.Transactional;
 
 /**
  *
@@ -53,6 +56,7 @@
     // TODO ivlcek - konstanty nacitat cez lokalizovane rozhranie
     public static final String QUERY_TO_POTENTIAL_DEMAND_SUBJECT = "Dotaz na Vasu zadanu poptavku";
     public static final String OFFER_TO_POTENTIAL_DEMAND_SUBJECT = "Ponuka na vasu poptavku/nazov dodavatela";
+    public static final String INTERNAL_MESSAGE = "Interna sprava";
     /**
      * Generated serialVersionUID.
      */
@@ -197,6 +201,28 @@
     }
 
     /**
+     * Message sent by user to another user without any link to demand or offer.
+     * @param messageDetailImpl
+     * @return message
+     */
+    @Override
+    public MessageDetail sendInternalMessage(MessageDetail messageDetailImpl) {
+        try {
+            Message m = messageService.newReply(this.messageService.getById(
+                    messageDetailImpl.getThreadRootId()),
+                    this.generalService.find(User.class, messageDetailImpl.getSenderId()));
+            m.setBody(messageDetailImpl.getBody());
+            m.setSubject(INTERNAL_MESSAGE);
+            // TODO set the id correctly, check it
+            MessageDetail messageDetailFromDB = MessageDetail.createMessageDetail(this.messageService.create(m));
+            return messageDetailFromDB;
+        } catch (MessageException ex) {
+            Logger.getLogger(MessageRPCServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
+            return null;
+        }
+    }
+
+    /**
      * Offer sent by supplier to potential demand.
      * TODO replace this into OfferRPCServiceImpl
      * @param offer
@@ -301,11 +327,13 @@
      * Change 'read' status of sent messages to chosen value
      */
     @Override
+    @Transactional(propagation = Propagation.REQUIRED)
     public void setMessageReadStatus(List<Long> userMessageIds, boolean isRead) {
         for (Long userMessageId : userMessageIds) {
-            UserMessage userMessage = this.generalService.find(UserMessage.class, userMessageId);
+            final UserMessage userMessage = this.userMessageService.getById(602L);
+//            UserMessage userMessage = this.generalService.find(UserMessage.class, userMessageId);
             userMessage.setRead(isRead);
-            this.generalService.save(userMessage);
+            this.userMessageService.update(userMessage);
         }
     }
 
@@ -314,11 +342,11 @@
      * Change 'star' status of sent messages to chosen value
      */
     @Override
-    public void setMessageStarStatus(List<Long> userMessageIds, boolean isRead) {
+    public void setMessageStarStatus(List<Long> userMessageIds, boolean isStarred) {
         for (Long userMessageId : userMessageIds) {
             UserMessage userMessage = this.generalService.find(UserMessage.class, userMessageId);
-            userMessage.setStarred(isRead);
-            this.generalService.save(userMessage);
+            userMessage.setStarred(isStarred);
+            this.userMessageService.update(userMessage);
         }
     }
 
@@ -366,8 +394,9 @@
         if (searchDataHolder != null) {
             messageSearch = new Search(Message.class);
             if (searchDataHolder.getMessagesTab().getSender() != null) {
-                messageSearch.addFilterIn("sender", generalService.search(new Search(User.class)
-                        .addFilterLike("email", "%" + searchDataHolder.getMessagesTab().getSender() + "%")));
+                messageSearch.addFilterIn("sender", generalService.search(
+                        new Search(User.class).addFilterLike(
+                        "email", "%" + searchDataHolder.getMessagesTab().getSender() + "%")));
             }
             if (searchDataHolder.getMessagesTab().getSubject() != null) {
                 messageSearch.addFilterLike("subject", "%" + searchDataHolder.getMessagesTab().getSubject() + "%");
@@ -474,7 +503,6 @@
 //        }
 //        return search;
 //    }
-
     /**
      * CLIENT.
      *
@@ -576,7 +604,131 @@
 
     @Override
     public List<UserMessageDetail> getSentMessages(Long senderId, SearchModuleDataHolder searchDataHolder) {
-        return this.getMessages(senderId, searchDataHolder, Arrays.asList(MessageUserRoleType.SENDER));
+        User sender = generalService.find(User.class, senderId);
+
+        /****/// ziskaj vsetky spravy poslane danym uzivatelom
+        Search messageSearch = new Search(Message.class);
+        messageSearch.addFilterEqual("sender", sender);
+        //ak treba, filtruj spravy poslane danym uzivatelom
+        if (searchDataHolder != null) {
+            if (searchDataHolder.getMessagesTab().getSubject() != null) {
+                messageSearch.addFilterLike("subject", "%" + searchDataHolder.getMessagesTab().getSubject() + "%");
+            }
+            if (searchDataHolder.getMessagesTab().getBody() != null) {
+                messageSearch.addFilterLike("body", "%" + searchDataHolder.getMessagesTab().getBody() + "%");
+            }
+        }
+
+        /****/
+        Map<Long, Message> senderMessages = new HashMap<Long, Message>();
+        /****/
+        List<Message> senderMessagesTmp = new ArrayList<Message>();
+        /****/
+        senderMessagesTmp.addAll(generalService.search(messageSearch));
+        for (Message msg : senderMessagesTmp) {
+            if (!senderMessages.containsKey(msg.getThreadRoot().getId())) {
+                senderMessages.put(msg.getThreadRoot().getId(), msg);
+            }
+        }
+
+        /****///Ziskaj vsetkych prijemcov danych sprav
+        List<MessageUserRole> recipients = new ArrayList<MessageUserRole>();
+        Search messageUserRoleSearch = new Search(MessageUserRole.class);
+        messageUserRoleSearch.addFilterIn("message", generalService.search(messageSearch));
+        messageUserRoleSearch.addFilterIn("type", MessageUserRoleType.TO);
+        //ak treba, filtruj prijemcov danych sprav
+        if (searchDataHolder != null) {
+            messageUserRoleSearch.addFilterIn("user", generalService.search(
+                    new Search(User.class).addFilterLike(
+                    "email", "%" + searchDataHolder.getMessagesTab().getSender() + "%")));
+        }
+        /****/
+        recipients.addAll(generalService.search(messageUserRoleSearch));
+
+//        Search recipientMessagesSearch = new Search(MessageUserRole.class);
+//        recipientMessagesSearch.addFilterEqual("user", sender);
+//        recipientMessagesSearch.addFilterIn("type", roles);
+//        if (searchDataHolder != null) {
+//            recipientMessagesSearch.addFilterIn("message", generalService.search(messageSearch));
+//        }
+
+        //ziskaj prvotne spravy na vypis v tabulke
+//        List<Message> rootMessages = new ArrayList<Message>();
+//        List<Long> threadIds = new ArrayList<Long>();
+//        if (recipients.isEmpty()) {
+//            for (Message msg : senderMessages) {
+//                if (!threadIds.contains(msg.getThreadRoot().getId())) {
+//                    threadIds.add(msg.getThreadRoot().getId());
+//                    Search rootMsgSearch = new Search(Message.class);
+//                    rootMsgSearch.addFilterEqual("id", msg.getThreadRoot().getId());
+//                    rootMsgSearch.addFilterNull("parent");
+//                    rootMessages.addAll(generalService.search(messageSearch));
+//                }
+//            }
+//        } else {
+//            for (MessageUserRole mur : recipients) {
+//                if (!threadIds.contains(mur.getMessage().getThreadRoot().getId())) {
+//                    threadIds.add(mur.getMessage().getThreadRoot().getId());
+//                    Search rootMsgSearch = new Search(Message.class);
+//                    rootMsgSearch.addFilterEqual("id", mur.getMessage().getThreadRoot().getId());
+//                    rootMsgSearch.addFilterNull("parent");
+//                    rootMessages.addAll(generalService.search(messageSearch));
+//                }
+//            }
+//        }
+
+//        Search firstBornRecipientMessagesSearch = new Search(Message.class);
+//        List<Message> firstBornRecipientMessages = new ArrayList<Message>();
+//        for (MessageUserRole mur : recipientMessages) {
+//            firstBornRecipientMessagesSearch.addFilterEqual("id", mur.getMessage().getId());
+//            firstBornRecipientMessages = generalService.search(firstBornRecipientMessagesSearch);
+//        }
+
+//        Map<Long, Message> rootRecipientMessages = new TreeMap<Long, Message>();
+//        for (MessageUserRole mur : senderMessages) {
+//            if (mur.getMessage().getParent() == null) {
+//                // nemusi kontorlovat, ved thread_id s parent_id = null je vzdy len jeden
+////                if (!rootRecipientMessages.containsKey(mur.getMessage().getThreadRoot().getId())) {
+//                rootRecipientMessages.put(mur.getMessage().getThreadRoot().getId(), mur.getMessage());
+//            }
+//        }
+        //Stacilo by mi aj to zhora, ale musim ziskat este UserMessage, aby som vedel, isRead, isStarred, ...
+
+        /**///Ziskaj UserMessage (read/unread , starred/unstarred)
+        List<UserMessage> inboxMessages = new ArrayList<UserMessage>();
+        Search userMessagesSearch = new Search(UserMessage.class);
+//        for (Message msg : rootMessages) {
+
+        userMessagesSearch.addFilterEqual("user", sender);
+        userMessagesSearch.addFilterIn("message", senderMessages.values());
+        /**/ inboxMessages.addAll(generalService.search(userMessagesSearch));
+//        }
+
+
+
+
+        //Create details 
+        List<UserMessageDetail> inboxMessagesDetail = new ArrayList<UserMessageDetail>();
+//        for (MessageUserRole)
+        for (UserMessage userMessage : inboxMessages) {
+//            rootMessages.contains(userMessage.getMessage());
+//            senderMessages.containsValue(userMessage.getMessage());
+//            userMessage.getMessage().equals(this);
+            for (MessageUserRole mur : recipients) {
+                if (mur.getMessage().equals(userMessage.getMessage())) {
+                    try {
+                        userMessage.getMessage().setSender(mur.getMessage().getSender());
+                    } catch (MessageException ex) {
+                        Logger.getLogger(MessageRPCServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
+                    }
+                }
+            }
+
+            inboxMessagesDetail.add(UserMessageDetail.createUserMessageDetail(userMessage));
+        }
+
+        return inboxMessagesDetail;
+//        return this.getMessages(senderId, searchDataHolder, Arrays.asList(MessageUserRoleType.SENDER));
     }
 
     private List<UserMessageDetail> getMessages(Long recipientId, SearchModuleDataHolder searchDataHolder,
@@ -587,8 +739,9 @@
         if (searchDataHolder != null) {
             messageSearch = new Search(Message.class);
             if (searchDataHolder.getMessagesTab().getSender() != null) {
-                messageSearch.addFilterIn("sender", generalService.search(new Search(User.class)
-                        .addFilterLike("email", "%" + searchDataHolder.getMessagesTab().getSender() + "%")));
+                messageSearch.addFilterIn("sender", generalService.search(
+                        new Search(User.class).addFilterLike(
+                        "email", "%" + searchDataHolder.getMessagesTab().getSender() + "%")));
             }
             if (searchDataHolder.getMessagesTab().getSubject() != null) {
                 messageSearch.addFilterLike("subject", "%" + searchDataHolder.getMessagesTab().getSubject() + "%");
@@ -598,7 +751,7 @@
             }
         }
 
-        //Ziskaj vsetky spravy daneho uzivatela, kt bol oznaceny ako adresat
+        //Ziskaj vsetky spravy daneho uzivatela, kt bol oznaceny ako adresat alebo odosielatel
         List<MessageUserRole> recipientMessages = new ArrayList<MessageUserRole>();
         Search recipientMessagesSearch = new Search(MessageUserRole.class);
         recipientMessagesSearch.addFilterEqual("user", recipient);
@@ -646,8 +799,9 @@
         messageSearch.addFilterEqual("messageState", MessageState.DELETED);
         if (searchDataHolder != null) {
             if (searchDataHolder.getMessagesTab().getSender() != null) {
-                messageSearch.addFilterIn("sender", generalService.search(new Search(User.class)
-                        .addFilterLike("email", "%" + searchDataHolder.getMessagesTab().getSender() + "%")));
+                messageSearch.addFilterIn("sender", generalService.search(
+                        new Search(User.class).addFilterLike(
+                        "email", "%" + searchDataHolder.getMessagesTab().getSender() + "%")));
             }
             if (searchDataHolder.getMessagesTab().getSubject() != null) {
                 messageSearch.addFilterLike("subject", "%" + searchDataHolder.getMessagesTab().getSubject() + "%");
@@ -680,4 +834,20 @@
 
         return deletedMessagesDetail;
     }
-}
+
+    @Override
+    public void deleteMessages(List<Long> messagesIds) {
+        Search searchMsgs = new Search(Message.class);
+        searchMsgs.addFilterIn("id", messagesIds);
+        List<Message> msgs = generalService.search(searchMsgs);
+        for (Message msg : msgs) {
+            Message subRoot = messageService.getById(msg.getId());
+            List<Message> conversation = messageService.getAllDescendants(subRoot);
+            msg.setMessageState(MessageState.DELETED); //musi byt? neobsahuje to ten getALlDescendatns
+            for (Message msg1 : conversation) {
+                msg1.setMessageState(MessageState.DELETED);
+            }
+            generalService.merge(msg);
+        }
+    }
+}
\ No newline at end of file
Index: src/main/java/cz/poptavka/sample/shared/domain/message/MessageDetail.java
===================================================================
--- src/main/java/cz/poptavka/sample/shared/domain/message/MessageDetail.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/shared/domain/message/MessageDetail.java	(working copy)
@@ -17,12 +17,13 @@
  */
 public class MessageDetail implements Serializable {
 
+    private static final String HTML_UNREAD_START = "<strong>";
+    private static final String HTML_UNREAD_END = "</strong>";
     /**
      * Generated serialVersionUID.
      */
     private static final long serialVersionUID = -928374659233195109L;
     private long messageId;
-
     private long threadRootId;
     private long parentId;
 //    private long firstBornId;
@@ -38,11 +39,9 @@
     private long userMessageId;
     private boolean read;
     private boolean starred;
-
     private int messageCount;
     private int unreadSubmessages;
 
-
     public MessageDetail() {
     }
 
@@ -185,7 +184,6 @@
 //    public void setNexSiblingId(long nexSiblingId) {
 //        this.nexSiblingId = nexSiblingId;
 //    }
-
     /**
      * @return the subject
      */
@@ -339,6 +337,14 @@
                 + getUnreadSubmessages() + ")";
     }
 
+    public static String displayHtml(String trustedHtml, boolean isRead) {
+        if (isRead) {
+            return trustedHtml;
+        } else {
+            return HTML_UNREAD_START + trustedHtml + HTML_UNREAD_END;
+        }
+    }
+
     @Override
     public String toString() {
         StringBuilder sb = new StringBuilder();
Index: src/main/java/cz/poptavka/sample/client/service/demand/MessageRPCServiceAsync.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/service/demand/MessageRPCServiceAsync.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/service/demand/MessageRPCServiceAsync.java	(working copy)
@@ -27,6 +27,8 @@
 
     void sendQueryToPotentialDemand(MessageDetail messageToSend, AsyncCallback<MessageDetail> callback);
 
+    void sendInternalMessage(MessageDetail messageDetailImpl, AsyncCallback<MessageDetail> callback);
+
     void sendOffer(OfferMessageDetail demandOffer, AsyncCallback<OfferMessageDetail> callback);
 
     void setMessageReadStatus(List<Long> userMessageIds, boolean isRead, AsyncCallback<Void> callback);
@@ -59,4 +61,6 @@
 
     void getDeletedMessages(Long userId, SearchModuleDataHolder searchDataHolder,
             AsyncCallback<List<UserMessageDetail>> callback);
+
+    void deleteMessages(List<Long> messagesIds, AsyncCallback<List<UserMessageDetail>> callback);
 }
Index: src/main/java/cz/poptavka/sample/client/service/demand/MessageRPCService.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/service/demand/MessageRPCService.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/service/demand/MessageRPCService.java	(working copy)
@@ -43,6 +43,8 @@
 
     MessageDetail sendQueryToPotentialDemand(MessageDetail messageToSend);
 
+    MessageDetail sendInternalMessage(MessageDetail messageDetailImpl);
+
     OfferMessageDetail sendOffer(OfferMessageDetail demandOffer);
 
     void setMessageReadStatus(List<Long> userMessageIds, boolean isRead);
@@ -56,4 +58,6 @@
     List<UserMessageDetail> getSentMessages(Long senderId, SearchModuleDataHolder searchDataHolder);
 
     List<UserMessageDetail> getDeletedMessages(Long userId, SearchModuleDataHolder searchDataHolder);
+
+    void deleteMessages(List<Long> messagesIds);
 }
Index: src/main/java/cz/poptavka/sample/client/root/RootEventBus.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/root/RootEventBus.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/root/RootEventBus.java	(working copy)
@@ -183,7 +183,7 @@
     void initAdminModule(SearchModuleDataHolder filter);
 
     @Event(modulesToLoad = MessagesModule.class)
-    void initMessagesModule();
+    void initMessagesModule(String action);
 
     @Event(modulesToLoad = DemandModule.class)
     void initDemandModule();
Index: src/main/java/cz/poptavka/sample/client/root/RootPresenter.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/root/RootPresenter.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/root/RootPresenter.java	(working copy)
@@ -145,6 +145,7 @@
 
     public void onAtAccount() {
         eventBus.setUserMenu();
-        eventBus.initDemandModule();
+//        eventBus.initDemandModule();
+        eventBus.initMessagesModule("displayGrid");
     }
 }
Index: src/main/java/cz/poptavka/sample/client/user/widget/messaging/UserConversationPanel.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/widget/messaging/UserConversationPanel.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/widget/messaging/UserConversationPanel.java	(working copy)
@@ -71,7 +71,11 @@
 
         if (messages.size() > 1) {
             for (int i = 1; i < messages.size(); i++) {
-                messagePanel.add(new SimpleMessageWindow(messages.get(i), collapsed));
+                if (i == messages.size()-1) {
+                    messagePanel.add(new SimpleMessageWindow(messages.get(i), false));
+                } else {
+                    messagePanel.add(new SimpleMessageWindow(messages.get(i), collapsed));
+                }
             }
             ((SimpleMessageWindow) messagePanel.getWidget(0)).setMessageStyle(MessageDisplayType.FIRST);
             ((SimpleMessageWindow) messagePanel.getWidget(messagePanel.getWidgetCount() - 1))
Index: src/main/java/cz/poptavka/sample/client/user/UserPresenter.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/UserPresenter.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/UserPresenter.java	(working copy)
@@ -47,7 +47,7 @@
         view.getMessagesButton().addClickHandler(new ClickHandler() {
 
             public void onClick(ClickEvent event) {
-                eventBus.initMessagesModule();
+                eventBus.initMessagesModule("displayGrid");
             }
         });
         view.getSettingsButton().addClickHandler(new ClickHandler() {
Index: src/main/java/cz/poptavka/sample/client/user/menu/UserMenuPresenter.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/menu/UserMenuPresenter.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/menu/UserMenuPresenter.java	(working copy)
@@ -37,7 +37,7 @@
         view.getMessagesButton().addClickHandler(new ClickHandler() {
 
             public void onClick(ClickEvent event) {
-                eventBus.initMessagesModule();
+                eventBus.initMessagesModule("displayGrid");
             }
         });
         view.getSettingsButton().addClickHandler(new ClickHandler() {
Index: src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleHistory.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleHistory.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleHistory.java	(working copy)
@@ -6,6 +6,7 @@
 import com.mvp4g.client.history.HistoryConverter;
 
 import cz.poptavka.sample.client.main.common.search.SearchModuleDataHolder;
+import cz.poptavka.sample.shared.domain.UserDetail;
 import java.util.logging.Logger;
 
 /**
@@ -28,8 +29,9 @@
     private static final String MESSAGES_INBOX = "initMessagesTabModuleInbox";
     private static final String MESSAGES_SENT = "initMessagesTabModuleSent";
     private static final String MESSAGES_DELETED = "initMessagesTabModuleTrash";
+    private static final String COMPOSE_MESSAGE = "initMessagesTabComposeMail";
+
 //    private MessageListPresenter messagePresenter = null;
-
     /**           DEVEL PRESENTER INITIALIZATION SECTION               */
     /*******************************************************************/
     @Override
@@ -51,6 +53,10 @@
         if (historyName.equals(MESSAGES_DELETED)) {
             eventBus.initMessagesTabModuleTrash(null);
         }
+
+        if (historyName.equals(COMPOSE_MESSAGE)) {
+            eventBus.initMessagesTabComposeMail(null, null);
+        }
     }
 
     @Override
@@ -69,4 +75,8 @@
     public String onInitMessagesTabModuleTrash(SearchModuleDataHolder filter) {
         return "onInitMessagesTabModuleTrash";
     }
+
+    public String onInitMessagesTabComposeMail(UserDetail recipient, String action) {
+        return "onInitMessagesTabComposeMail";
+    }
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleMessageHandler.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleMessageHandler.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleMessageHandler.java	(working copy)
@@ -1,5 +1,6 @@
 package cz.poptavka.sample.client.user.messages;
 
+import com.google.gwt.core.client.GWT;
 import java.util.ArrayList;
 
 import com.google.gwt.user.client.Window;
@@ -31,8 +32,8 @@
      * @param messageToSend
      * @param type
      */
-    public void onSendMessage(MessageDetail messageToSend, final ViewType type) {
-        messageService.sendQueryToPotentialDemand(messageToSend, new AsyncCallback<MessageDetail>() {
+    public void onSendMessage(MessageDetail messageToSend, final String action) {
+        messageService.sendInternalMessage(messageToSend, new AsyncCallback<MessageDetail>() {
 
             @Override
             public void onFailure(Throwable caught) {
@@ -42,7 +43,15 @@
 
             @Override
             public void onSuccess(MessageDetail sentMessage) {
-                eventBus.sendMessageResponse(sentMessage, type);
+                if (action.equals("composeNewForwarded")) {
+                    // TODO forward back where I was when forwarded to Compose Message widget
+                } else if (action.equals("composeNew")) {
+                    //TODO forward to inbox
+                    eventBus.initMessagesTabModuleInbox(null);
+                } else if (action.equals("composeReply")) {
+                    //TODO forward to inbox && display relevant conversation with new reply
+                }
+//                eventBus.sendMessageResponse(sentMessage, type);
             }
         });
     }
@@ -151,4 +160,19 @@
             }
         });
     }
+
+    public void onDeleteMessages(List<Long> messagesIds) {
+        messageService.deleteMessages(messagesIds, new AsyncCallback<List<UserMessageDetail>>() {
+
+            @Override
+            public void onFailure(Throwable caught) {
+                throw new UnsupportedOperationException("Not supported yet.");
+            }
+
+            @Override
+            public void onSuccess(List<UserMessageDetail> result) {
+                GWT.log("Messages deleted.");
+            }
+        });
+    }
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleView.ui.xml
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleView.ui.xml	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleView.ui.xml	(working copy)
@@ -13,6 +13,11 @@
                 </div>-->
                 <ul>
                     <li>
+                        <g:Button ui:field="composeButton">
+                            <ui:msg key="composeButton">Composer</ui:msg>
+                        </g:Button>
+                    </li>
+                    <li>
                         <g:Button ui:field="inboxButton">
                             <ui:msg key="inbox">Inbox</ui:msg>
                         </g:Button>
@@ -31,7 +36,37 @@
             </g:HTMLPanel>
         </g:west>
         <g:center>
-            <g:ScrollPanel>
+            <g:SplitLayoutPanel styleName='{res.layout.fullSize}' ui:field="splitPanelSouth">
+                <g:south size="800">
+                    <g:SimplePanel ui:field="wrapperDetail">
+                        <g:HTMLPanel>
+                            <div>
+                                <strong>Defail detail panel</strong>
+                                <br />
+                                <br />
+                                <div>
+                            Default content....can contain some advertisements.
+                                </div>
+                            </div>
+                        </g:HTMLPanel>
+                    </g:SimplePanel>
+                </g:south>
+                <g:center>
+                    <g:SimplePanel ui:field="wrapperMain">
+                        <g:HTMLPanel>
+                            <div>
+                                <strong>Main panel</strong>
+                                <br />
+                                <br />
+                                <div>
+                            Main content for MessageList and ComposeMessage widgets.
+                                </div>
+                            </div>
+                        </g:HTMLPanel>    
+                    </g:SimplePanel>                        
+                </g:center>
+            </g:SplitLayoutPanel>
+<!--            <g:ScrollPanel>
                 <g:SimplePanel ui:field="contentPanel">
                     <g:HTML>
                         <center>
@@ -41,7 +76,7 @@
                         <br />
                     </g:HTML>
                 </g:SimplePanel>
-            </g:ScrollPanel>
+            </g:ScrollPanel>-->
         </g:center>
     </g:DockLayoutPanel>
 </ui:UiBinder>
Index: src/main/java/cz/poptavka/sample/client/user/messages/MessagesModulePresenter.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/MessagesModulePresenter.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/MessagesModulePresenter.java	(working copy)
@@ -4,11 +4,13 @@
 import com.google.gwt.event.dom.client.ClickHandler;
 import com.google.gwt.user.client.ui.Button;
 import com.google.gwt.user.client.ui.SimplePanel;
+import com.google.gwt.user.client.ui.SplitLayoutPanel;
 import com.google.gwt.user.client.ui.Widget;
 import com.mvp4g.client.annotation.Presenter;
 import com.mvp4g.client.presenter.BasePresenter;
 
 import cz.poptavka.sample.client.main.Storage;
+import cz.poptavka.sample.client.user.messages.tab.ComposeMessagePresenter;
 import cz.poptavka.sample.client.user.messages.tab.MessageListPresenter;
 
 /**
@@ -22,19 +24,25 @@
 
         Widget getWidgetView();
 
-        void setContent(Widget contentWidget);
+        SplitLayoutPanel getSplitPanel();
 
-        //beho devel section
+        SimplePanel getWrapperMain();
+
+        SimplePanel getWrapperDetail();
+
+        Button getComposeButton();
+
         Button getInboxButton();
 
         Button getSentButton();
 
         Button getTrashButton();
-
-        SimplePanel getContentPanel();
+        
     }
     //devel attribute
-    private MessageListPresenter supList = null;
+    private MessageListPresenter messagesList = null;
+//    private ConversationWrapperPresenter detailSection = null;
+    private ComposeMessagePresenter composer = null;
 
     @Override
     public void bind() {
@@ -45,24 +53,39 @@
         view.setNewDemandToken(getTokenGenerator().invokeNewDemand());
         view.setAllDemandsToken(getTokenGenerator().invokeAtDemands());
         view.setAllSuppliersToken(getTokenGenerator().invokeAtSuppliers());
-
+        
         //MENU - SUPPLIER
         view.setPotentialDemandsToken(getTokenGenerator().invokePotentialDemands());
          */
-        //DEVEl - BEHO
+        view.getComposeButton().addClickHandler(new ClickHandler() {
+
+            @Override
+            public void onClick(ClickEvent event) {
+                ComposeMessagePresenter composer = eventBus.addHandler(ComposeMessagePresenter.class);
+                composer.onInitMessagesTabComposeMail(null, null);
+                view.getWrapperDetail().clear();
+//                view.getWrapperDetail().setVisible(false);
+                view.getSplitPanel().setSize("500px","0px");
+//                if (detailSection == null) {
+//                    composer.compose(null, "composeNew");
+//                } else {
+//                    composer.compose(null, "composeReply");
+//                }
+            }
+        });
         view.getInboxButton().addClickHandler(new ClickHandler() {
 
             @Override
             public void onClick(ClickEvent arg0) {
                 //devel code
-                if (supList != null) {
-                    supList.develRemoveDetailWrapper();
-                    eventBus.removeHandler(supList);
-                    supList = null;
-                    view.getContentPanel().remove(view.getContentPanel().getWidget());
-                }
-                supList = eventBus.addHandler(MessageListPresenter.class);
-                supList.onInitMessagesTabModuleInbox(null);
+//                if (messagesList != null) {
+//                    detailSection.develRemoveReplyWidget();
+//                    eventBus.removeHandler(messagesList);
+//                    messagesList = null;
+//                    view.getWrapperMain().remove(view.getWrapperMain().getWidget());
+//                }
+                messagesList = eventBus.addHandler(MessageListPresenter.class);
+                messagesList.onInitMessagesTabModuleInbox(null);
 
                 //production code
 //                eventBus.initInbox();
@@ -73,14 +96,14 @@
             @Override
             public void onClick(ClickEvent arg0) {
                 //devel code
-                if (supList != null) {
-                    supList.develRemoveDetailWrapper();
-                    eventBus.removeHandler(supList);
-                    supList = null;
-                    view.getContentPanel().remove(view.getContentPanel().getWidget());
-                }
-                supList = eventBus.addHandler(MessageListPresenter.class);
-                supList.onInitMessagesTabModuleSent(null);
+//                if (messagesList != null) {
+//                    detailSection.develRemoveReplyWidget();
+//                    eventBus.removeHandler(messagesList);
+//                    messagesList = null;
+//                    view.getWrapperMain().remove(view.getWrapperMain().getWidget());
+//                }
+                messagesList = eventBus.addHandler(MessageListPresenter.class);
+                messagesList.onInitMessagesTabModuleSent(null);
 
                 //production code
 //                eventBus.initSent();
@@ -91,14 +114,14 @@
             @Override
             public void onClick(ClickEvent arg0) {
                 //devel code
-                if (supList != null) {
-                    supList.develRemoveDetailWrapper();
-                    eventBus.removeHandler(supList);
-                    supList = null;
-                    view.getContentPanel().remove(view.getContentPanel().getWidget());
-                }
-                supList = eventBus.addHandler(MessageListPresenter.class);
-                supList.onInitMessagesTabModuleTrash(null);
+//                if (messagesList != null) {
+//                    detailSection.develRemoveReplyWidget();
+//                    eventBus.removeHandler(messagesList);
+//                    messagesList = null;
+//                    view.getWrapperMain().remove(view.getWrapperMain().getWidget());
+//                }
+                messagesList = eventBus.addHandler(MessageListPresenter.class);
+                messagesList.onInitMessagesTabModuleTrash(null);
 
                 //production code
 //                eventBus.initTrash();
@@ -108,7 +131,11 @@
 
     //TODO
     //later add UserDetail as parameter
-    public void onInitMessagesModule() {
+    /**
+     * 
+     * @param action - composeNew, composeNewForwarded, composeReply, displayGrid
+     */
+    public void onInitMessagesModule(String action) {
         // hiding window for this is after succesfull Userhandler call
         Storage.showLoading(Storage.MSGS.progressMessagesLayoutInit());
 //        if (user.getRoleList().contains(Role.CLIENT)) {
@@ -124,8 +151,40 @@
 //            eventBus.getPotentialDemands(user.getId());
 //        }
 
-//        panel.setWidget(view.getWidgetView());
+//        panel.setWidget(view.getWidgetView());\
+
+        //Set Styles
         view.getWidgetView().setStyleName(Storage.RSCS.common().user());
+
+//        if (action.contains("composeNew")) { // composeNew, composeNewForwarded
+//            if (composer == null) {
+//                composer = eventBus.addHandler(ComposeMessagePresenter.class);
+//                view.getWrapperMain().setWidget(composer.getView());// mozno treba opacne ako inde
+//            }
+//            view.getWrapperDetail().setWidth("0"); // ktore lepsie pouzit?
+//        } else if (action.equals("composeReply")) {
+//            if (composer == null) {
+//                composer = eventBus.addHandler(ComposeMessagePresenter.class);
+//                view.getWrapperMain().setWidget(composer.getView());
+//            }
+//            if (detailSection == null) {
+//                detailSection = eventBus.addHandler(ConversationWrapperPresenter.class);
+//                view.getWrapperDetail().setWidget(detailSection.getView());
+//                view.getWrapperDetail().setWidth("500");
+//            }
+//        } else if (action.equals("displayGrid")) {
+//            //Load MessageList
+//            if (messagesList == null) {
+//                messagesList = eventBus.addHandler(MessageListPresenter.class);
+//                view.getWrapperMain().setWidget(messagesList.getView());
+//            }
+//            if (detailSection == null) {
+//                detailSection = eventBus.addHandler(ConversationWrapperPresenter.class);
+//                view.getWrapperDetail().setWidget(detailSection.getView());
+//                view.getWrapperDetail().setWidth("500");
+//            }
+//        }
+
         eventBus.setBodyHolderWidget(view.getWidgetView());
         Storage.hideLoading();
 //        eventBus.setTabWidget(view.getWidgetView());
@@ -134,7 +193,11 @@
 //        eventBus.setUserInteface((StyleInterface) view.getWidgetView());
     }
 
-    public void onDisplayView(Widget content) {
-        view.setContent(content);
+    public void onDisplayMain(Widget content) {
+        view.getWrapperMain().setWidget(content);
     }
+    
+    public void onDisplayDetail(Widget content) {
+        view.getWrapperDetail().setWidget(content);
+    }
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessageView.ui.xml
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessageView.ui.xml	(revision 855)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessageView.ui.xml	(working copy)
@@ -8,60 +8,70 @@
         type='cz.poptavka.sample.client.resources.StyleResource' />
 
     <ui:style>
-
+        .textArea {
+            width: 800px;
+            height: 300px;
+        }
     </ui:style>
-    <g:SplitLayoutPanel styleName='{res.layout.fullSize}'>
-        <g:east size="500">
-            <g:SimplePanel ui:field="wrapperPanel">
-                <g:HTMLPanel>
-                    <div>
-                        <strong>Defail detail panel</strong>
-                        <br /><br />
-                        <div>
-                            Default content....can contain some advertisements.
-                        </div>
-                    </div>
-                </g:HTMLPanel>
-            </g:SimplePanel>
-        </g:east>
+<!--    <g:DockLayoutPanel unit="EM" ui:field="wrapper">
+        <g:north size="1">
+            <g:HTMLPanel>
+                <div>
+                    <g:Button ui:field="sendBtn">
+                            Send
+                    </g:Button>
+                    <g:Button ui:field="discardBtn">
+                            Discard
+                    </g:Button>
+                </div>
+            </g:HTMLPanel>
+        </g:north>
         <g:center>
-            <g:DockLayoutPanel unit="EM">
-                <g:north size="5">
-                    <g:HTMLPanel>
-                    <div>
-                        <g:Button ui:field="readBtn">
-                            Read
-                        </g:Button>
-                        <g:Button ui:field="unreadBtn">
-                            Unread
-                        </g:Button>
-                        <g:Button ui:field="starBtn">
-                            Star
-                        </g:Button>
-                        <g:Button ui:field="unstarBtn">
-                            Unstar
-                        </g:Button>
-                    </div>
-                    </g:HTMLPanel>
-                </g:north>
-                <g:center>
-                    <s:MessageListGrid ui:field="demandGrid" />
-                </g:center>
-                 <g:south size="3">
-                      <g:HTMLPanel>
-                    <table
-                      style="width:100%">
-                      <tr>
-                        <td
-                          align='center'>
-                          <c:SimplePager
-                            ui:field='pager' />
-                        </td>
-                      </tr>
-                    </table>
-                  </g:HTMLPanel>
-                </g:south>
-            </g:DockLayoutPanel>
+            <g:VerticalPanel>
+                <g:HorizontalPanel>
+                    <g:Label>To</g:Label>    
+                    <g:TextBox ui:field="recipient"></g:TextBox>
+                </g:HorizontalPanel>
+                <g:HorizontalPanel>
+                    <g:Label>Subject</g:Label>    
+                    <g:TextBox ui:field="subject"></g:TextBox>    
+                </g:HorizontalPanel>
+            </g:VerticalPanel>
         </g:center>
-    </g:SplitLayoutPanel>
+        <g:south size="3">
+            <g:TextArea ui:field="body"></g:TextArea>  
+        </g:south>
+    </g:DockLayoutPanel>-->
+    <g:HTMLPanel ui:field="wrapper">
+        <table>
+            <tr>
+                <td>
+                    <g:Button ui:field="sendBtn">Send</g:Button>
+                </td>
+                <td>
+                    <g:Button ui:field="discardBtn">Discard</g:Button>
+                </td>
+            </tr>
+            <tr>
+                <td>
+                    <g:Label>To</g:Label>    
+                </td>
+                <td>
+                    <g:TextBox ui:field="recipient"></g:TextBox>
+                </td>
+            </tr>
+            <tr>
+                <td>
+                    <g:Label>Subject</g:Label>
+                </td>
+                <td>
+                    <g:TextBox ui:field="subject"></g:TextBox>
+                </td>
+            </tr>
+        </table>
+        <g:TextArea styleName="textArea" ui:field="body"/>
+        
+        
+    </g:HTMLPanel>
+    
 </ui:UiBinder>
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageList.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageList.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageList.java	(working copy)
@@ -1,13 +1,10 @@
 package cz.poptavka.sample.client.user.messages.tab;
 
 import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
-import com.google.gwt.cell.client.FieldUpdater;
 import com.google.gwt.cell.client.ValueUpdater;
 import com.google.gwt.core.client.GWT;
 import com.google.gwt.dom.client.Style.Unit;
@@ -20,14 +17,13 @@
 import com.google.gwt.user.cellview.client.SimplePager.TextLocation;
 import com.google.gwt.user.client.ui.Button;
 import com.google.gwt.user.client.ui.Composite;
-import com.google.gwt.user.client.ui.SimplePanel;
 import com.google.gwt.user.client.ui.Widget;
 import com.google.gwt.view.client.DefaultSelectionEventManager;
 import com.google.gwt.view.client.ListDataProvider;
 import com.google.gwt.view.client.MultiSelectionModel;
 import com.google.gwt.view.client.SelectionModel;
-import com.mvp4g.client.view.ReverseViewInterface;
 
+import com.mvp4g.client.view.ReverseViewInterface;
 import cz.poptavka.sample.client.main.Storage;
 import cz.poptavka.sample.client.user.messages.tab.MessageListPresenter.IListM;
 import cz.poptavka.sample.shared.domain.message.UserMessageDetail;
@@ -39,7 +35,8 @@
  * @author beho
  *
  */
-public class MessageList extends Composite implements ReverseViewInterface<MessageListPresenter>, IListM {
+public class MessageList extends Composite implements
+        ReverseViewInterface<MessageListPresenter>, IListM {
 
     private static MessageListUiBinder uiBinder = GWT.create(MessageListUiBinder.class);
 
@@ -49,17 +46,14 @@
     private long lastOpenedDemand = -1;
     //table handling buttons
     @UiField
-    Button readBtn, unreadBtn, starBtn, unstarBtn;
+    Button readBtn, unreadBtn, starBtn, unstarBtn, deleteBtn;
     //DataGridattributes
     @UiField(provided = true)
-    MessageListGrid<UserMessageDetail> demandGrid;
+    MessageListGrid<UserMessageDetail> messageGrid;
     @UiField(provided = true)
     SimplePager pager;
     //presenter
     private MessageListPresenter presenter;
-    //detailWrapperPanel
-    @UiField
-    SimplePanel wrapperPanel;
 
     @Override
     public void setPresenter(MessageListPresenter presenter) {
@@ -76,11 +70,11 @@
         //load custom grid cssStyle
         Storage.RSCS.grid().ensureInjected();
         //demandGrid init
-        demandGrid = new MessageListGrid<UserMessageDetail>(UserMessageDetail.KEY_PROVIDER);
+        messageGrid = new MessageListGrid<UserMessageDetail>(UserMessageDetail.KEY_PROVIDER);
         // Add a selection model so we can select cells.
         final SelectionModel<UserMessageDetail> selectionModel =
                 new MultiSelectionModel<UserMessageDetail>(UserMessageDetail.KEY_PROVIDER);
-        demandGrid.setSelectionModel(selectionModel,
+        messageGrid.setSelectionModel(selectionModel,
                 DefaultSelectionEventManager.<UserMessageDetail>createCheckboxManager());
 
         //init table
@@ -89,7 +83,7 @@
         // Create a Pager to control the table.
         SimplePager.Resources pagerResources = GWT.create(SimplePager.Resources.class);
         pager = new SimplePager(TextLocation.CENTER, pagerResources, false, 0, true);
-        pager.setDisplay(demandGrid);
+        pager.setDisplay(messageGrid);
 
         initWidget(uiBinder.createAndBindUi(this));
     }
@@ -98,17 +92,42 @@
     public Widget getWidgetView() {
         return this;
     }
+//**** GRID related methods - START
+    private Column<UserMessageDetail, Boolean> starColumn;
+    private Column<UserMessageDetail, String> userCol;
+    private Column<UserMessageDetail, String> subjectCol;
+    private Column<UserMessageDetail, String> creationCol;
 
     @Override
     public MessageListGrid<UserMessageDetail> getGrid() {
-        return demandGrid;
+        return messageGrid;
     }
 
     @Override
     public ListDataProvider<UserMessageDetail> getDataProvider() {
-        return demandGrid.getDataProvider();
+        return messageGrid.getDataProvider();
     }
 
+    @Override
+    public Column<UserMessageDetail, String> getCreationCol() {
+        return creationCol;
+    }
+
+    @Override
+    public Column<UserMessageDetail, Boolean> getStarColumn() {
+        return starColumn;
+    }
+
+    @Override
+    public Column<UserMessageDetail, String> getSubjectCol() {
+        return subjectCol;
+    }
+
+    @Override
+    public Column<UserMessageDetail, String> getUserCol() {
+        return userCol;
+    }
+
     /**
      * Create all columns to the grid and define click actions.
      */
@@ -118,42 +137,8 @@
 
 // **** definition of all needed FieldUpdaters
         //TEXT FIELD UPDATER create common demand display fieldUpdater for demand and related conversation display
-        FieldUpdater<UserMessageDetail, String> action = new FieldUpdater<UserMessageDetail, String>() {
-            @Override
-            public void update(int index, UserMessageDetail object, String value) {
-                MessageTableDisplay obj = (MessageTableDisplay) object;
-                object.setRead(true);
-                demandGrid.redraw();
-                presenter.displayConversation(object.getMessageDetail()
-                        .getThreadRootId(), object.getMessageDetail().getMessageId());
-            }
-        };
-//        //DATE FIELD UPDATER displaying of demand detail. The fieldUpdater 'action' cannot be used,
-//        //because this is working with Date instead of String
-        FieldUpdater<UserMessageDetail, Date> dateAction = new FieldUpdater<UserMessageDetail, Date>() {
 
-            @Override
-            public void update(int index, UserMessageDetail object,
-                    Date value) {
-                //for pure display detail action
-                presenter.displayConversation(object.getMessageDetail()
-                        .getThreadRootId(), object.getMessageDetail().getMessageId());
-            }
-        };
 
-        //STAR COLUMN FIELD UPDATER
-        FieldUpdater<UserMessageDetail, Boolean> starUpdater = new FieldUpdater<UserMessageDetail, Boolean>() {
-
-            @Override
-            public void update(int index, UserMessageDetail object, Boolean value) {
-                MessageTableDisplay obj = (MessageTableDisplay) object;
-                object.setStarred(!value);
-                demandGrid.redraw();
-                Long[] item = new Long[]{object.getId()};
-                presenter.updateStarStatus(Arrays.asList(item), !value);
-            }
-        };
-
 // **** ROW selection column and set it's width to 40px.
         //contains custom header providing selecting all visible items
         final Header<Boolean> header = factory.createCheckBoxHeader();
@@ -162,70 +147,44 @@
 
             @Override
             public void update(Boolean value) {
-                List<UserMessageDetail> rows = demandGrid.getVisibleItems();
+                List<UserMessageDetail> rows = messageGrid.getVisibleItems();
                 for (UserMessageDetail row : rows) {
                     selectionModel.setSelected(row, value);
                 }
 
             }
         });
-        demandGrid.addColumn(factory.createCheckboxColumn(selectionModel), header);
-        demandGrid.setColumnWidth(demandGrid.getColumn(MessageColumnFactory.COL_ZERO),
+        messageGrid.addColumn(factory.createCheckboxColumn(selectionModel), header);
+        messageGrid.setColumnWidth(messageGrid.getColumn(MessageColumnFactory.COL_ZERO),
                 MessageColumnFactory.WIDTH_40, Unit.PX);
 
 // **** Star collumn with defined valueUpdater and custom style
-        Column<UserMessageDetail, Boolean> starColumn = factory.createStarColumn();
-        starColumn.setFieldUpdater(starUpdater);
+        starColumn = factory.createStarColumn();
         //TODO
         //testing if assigning style in MessageColumnFactory works - works well 7.11.11 Beho
         //but keep here for reference
         //starColumn.setCellStyleNames(Storage.RSCS.grid().cellTableHandCursor());
-        demandGrid.setColumnWidth(starColumn, MessageColumnFactory.WIDTH_40, Unit.PX);
-        demandGrid.addColumn(starColumn, SafeHtmlUtils.fromSafeConstant("<br/>"));
+        messageGrid.setColumnWidth(starColumn, MessageColumnFactory.WIDTH_40, Unit.PX);
+        messageGrid.addColumn(starColumn, SafeHtmlUtils.fromSafeConstant("<br/>"));
 
 // **** user column
-        Column<UserMessageDetail, String> userCol = factory.createUserColumn(demandGrid.getSortHandler());
-        userCol.setFieldUpdater(action);
+        userCol = factory.createUserColumn(messageGrid.getSortHandler());
         //TODO i18
 //        demandGrid.addColumn(userCol, Storage.MSGS.title());
-        demandGrid.addColumn(userCol, "Od koho");
+        messageGrid.addColumn(userCol, "Od koho");
 
 // **** subject column
-        Column<UserMessageDetail, String> subjectCol = factory.createSubjectColumn(demandGrid.getSortHandler(), true);
-        subjectCol.setFieldUpdater(action);
+        subjectCol = factory.createSubjectColumn(messageGrid.getSortHandler(), true);
 //        demandGrid.addColumn(subjectCol, Storage.MSGS.client());
-        demandGrid.addColumn(subjectCol, "Predmet");
+        messageGrid.addColumn(subjectCol, "Predmet");
 
-
-//// **** urgent column
-//        Column<UserMessageDetail, Date> urgentCol = factory.createUrgentColumn(demandGrid.getSortHandler());
-//        urgentCol.setFieldUpdater(dateAction);
-//        //TODO
-//        //example width, can be different
-//        //widths shall be set automatically in
-//        demandGrid.setColumnWidth(urgentCol, 60, Unit.PX);
-//        demandGrid.addColumn(urgentCol, Storage.MSGS.urgency());
-//
-//// **** client rating column
-//        Column<UserMessageDetail, String> ratingCo = factory.createClientRatingColumn(demandGrid.getSortHandler());
-//        ratingCo.setFieldUpdater(action);
-//        //TODO
-//        //implement img header
-//        demandGrid.addColumn(ratingCo, "img");
-
-//// **** demand price column
-//        Column<UserMessageDetail, String> priceCol = factory.createPriceColumn(demandGrid.getSortHandler());
-//        priceCol.setFieldUpdater(action);
-//        demandGrid.addColumn(priceCol, Storage.MSGS.price());
-
 // **** creationDate column
-        Column<UserMessageDetail, Date> creationCol =
-                factory.createDateColumn(demandGrid.getSortHandler(), MessageColumnFactory.DATE_CREATED);
-        creationCol.setFieldUpdater(dateAction);
-        demandGrid.addColumn(creationCol, Storage.MSGS.createdDate());
+        creationCol = factory.createDateColumn(messageGrid.getSortHandler(), MessageColumnFactory.DATE_CREATED);
+        messageGrid.addColumn(creationCol, Storage.MSGS.createdDate());
 
     }
 
+//**** GRID related methods - END
     @Override
     public Button getReadBtn() {
         return readBtn;
@@ -247,6 +206,11 @@
     }
 
     @Override
+    public Button getDeleteBtn() {
+        return deleteBtn;
+    }
+
+    @Override
     public List<Long> getSelectedIdList() {
         List<Long> idList = new ArrayList<Long>();
         Set<UserMessageDetail> set = getSelectedMessageList();
@@ -261,12 +225,7 @@
     @Override
     public Set<UserMessageDetail> getSelectedMessageList() {
         MultiSelectionModel<UserMessageDetail> model =
-                (MultiSelectionModel<UserMessageDetail>) demandGrid.getSelectionModel();
+                (MultiSelectionModel<UserMessageDetail>) messageGrid.getSelectionModel();
         return model.getSelectedSet();
     }
-
-    @Override
-    public SimplePanel getWrapperPanel() {
-        return wrapperPanel;
-    }
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/RecipientTextBox.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/RecipientTextBox.java	(revision 0)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/RecipientTextBox.java	(revision 0)
@@ -0,0 +1,15 @@
+/*
+ * To change this template, choose Tools | Templates
+ * and open the template in the editor.
+ */
+package cz.poptavka.sample.client.user.messages.tab;
+
+import com.google.gwt.user.client.ui.TextBox;
+
+/**
+ *
+ * @author slavkovsky.martin
+ */
+public class RecipientTextBox extends TextBox {
+    
+}
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperView.ui.xml
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperView.ui.xml	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperView.ui.xml	(working copy)
@@ -16,10 +16,13 @@
     <g:HTMLPanel ui:field="container" styleName="{style.panel}" >
         <!-- conversation section with always visible header able to display loading and close button -->
         <w:ClickableDiv ui:field="conversationHeader" text="Conversation Section Header"/>
-        <d:UserConversationPanel ui:field="conversationPanel" styleName="{style.relative}"/>
+        <g:ScrollPanel>
+            <d:UserConversationPanel ui:field="conversationPanel" styleName="{style.relative}"/>
+        </g:ScrollPanel>
         <hr />
         <!-- reply widget -->
         <g:SimplePanel ui:field="replyHolder" />
+        <g:Button ui:field="replyBtn">Reply</g:Button>
         <hr />
     </g:HTMLPanel>
 </ui:UiBinder>
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessagePresenter.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessagePresenter.java	(revision 855)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessagePresenter.java	(working copy)
@@ -1,102 +1,66 @@
 package cz.poptavka.sample.client.user.messages.tab;
 
-
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-
 import com.google.gwt.event.dom.client.ClickEvent;
 import com.google.gwt.event.dom.client.ClickHandler;
 import com.google.gwt.user.client.ui.Button;
-import com.google.gwt.user.client.ui.SimplePanel;
+import com.google.gwt.user.client.ui.HTMLPanel;
+import com.google.gwt.user.client.ui.IsWidget;
+import com.google.gwt.user.client.ui.TextBox;
 import com.google.gwt.user.client.ui.Widget;
-import com.google.gwt.view.client.ListDataProvider;
 import com.mvp4g.client.annotation.Presenter;
+
+
 import com.mvp4g.client.presenter.LazyPresenter;
-import com.mvp4g.client.view.LazyView;
 
+import com.mvp4g.client.view.LazyView;
 import cz.poptavka.sample.client.main.Storage;
-import cz.poptavka.sample.client.main.common.search.SearchModuleDataHolder;
 import cz.poptavka.sample.client.user.messages.MessagesModuleEventBus;
-import cz.poptavka.sample.client.user.widget.DevelDetailWrapperPresenter;
+import cz.poptavka.sample.client.user.messages.tab.ComposeMessagePresenter.IComposeMessage;
 import cz.poptavka.sample.domain.common.OrderType;
+import cz.poptavka.sample.shared.domain.UserDetail;
 import cz.poptavka.sample.shared.domain.message.MessageDetail;
-import cz.poptavka.sample.shared.domain.message.UserMessageDetail;
-import cz.poptavka.sample.shared.domain.type.ViewType;
 import java.util.HashMap;
 import java.util.Map;
 
 //@Presenter(view = SupplierList.class)
-@Presenter(view = MessageList.class, multiple = true)
-public class MessageListPresenter extends LazyPresenter<MessageListPresenter.IListM, MessagesModuleEventBus> {
+@Presenter(view = ComposeMessageView.class, multiple = true)
+public class ComposeMessagePresenter extends LazyPresenter<IComposeMessage, MessagesModuleEventBus> {
 
-    public interface IListM extends LazyView {
+    public interface IComposeMessage extends LazyView, IsWidget {
 
         Widget getWidgetView();
 
-        //control buttons getters
-        Button getReadBtn();
+        HTMLPanel getWrapperPanel();
 
-        Button getUnreadBtn();
+        TextBox getRecipientTextBox();
 
-        Button getStarBtn();
+        MessageDetail getMessage();
 
-        Button getUnstarBtn();
+        //control buttons getters
+        Button getSendBtn();
 
-        //table getters
-        MessageListGrid<UserMessageDetail> getGrid();
-
-        ListDataProvider<UserMessageDetail> getDataProvider();
-
-        List<Long> getSelectedIdList();
-
-        Set<UserMessageDetail> getSelectedMessageList();
-
-        //detail wrapper
-        SimplePanel getWrapperPanel();
+        Button getDiscardBtn();
     }
-    //viewType
-    private ViewType type = ViewType.POTENTIAL;
-    private ConversationWrapperPresenter detailSection = null;
-    //remove this annotation for production
-    @SuppressWarnings("unused")
-    private boolean initialized = false;
+    private String action = null;
 
     /** Defines button actions. */
     @Override
     public void bindView() {
-        view.getReadBtn().addClickHandler(new ClickHandler() {
+        view.getSendBtn().addClickHandler(new ClickHandler() {
 
             @Override
             public void onClick(ClickEvent event) {
-                internalReadUpdate(true);
-                updateReadStatus(view.getSelectedIdList(), true);
+                //TODO Martin - co tam ma byt? aky ViewType?? - USER
+                eventBus.sendMessage(view.getMessage(), action);
             }
         });
-        view.getUnreadBtn().addClickHandler(new ClickHandler() {
+        view.getDiscardBtn().addClickHandler(new ClickHandler() {
 
             @Override
             public void onClick(ClickEvent event) {
-                internalReadUpdate(false);
-                updateReadStatus(view.getSelectedIdList(), false);
+                //TODO Martin
             }
         });
-        view.getStarBtn().addClickHandler(new ClickHandler() {
-
-            @Override
-            public void onClick(ClickEvent event) {
-                internalStarUpdate(true);
-                updateStarStatus(view.getSelectedIdList(), true);
-            }
-        });
-        view.getUnstarBtn().addClickHandler(new ClickHandler() {
-
-            @Override
-            public void onClick(ClickEvent event) {
-                internalStarUpdate(false);
-                updateStarStatus(view.getSelectedIdList(), false);
-            }
-        });
     }
 
     /**
@@ -105,160 +69,20 @@
      *
      * Associated DetailWrapper widget is created and initialized.
      */
-    private void init() {
-//        commented code is from production code
-//        if (!initialized) {
-//        eventBus.requestSupplierNewDemands();
-//        }
-//        orderColumns.clear();
-//        orderColumns.put("message.created", OrderType.ASC);
-//
-        Storage.setCurrentlyLoadedView("messagesTab");
-        view.getWidgetView().setStyleName(Storage.RSCS.common().userContent());
-        eventBus.displayView(view.getWidgetView());
-        //init wrapper widget
-        if (detailSection == null) {
-            detailSection = eventBus.addHandler(ConversationWrapperPresenter.class);
-            detailSection.initDetailWrapper(view.getWrapperPanel(), type);
-        }
-        initialized = true;
-    }
-    private final Map<String, OrderType> orderColumns = new HashMap<String, OrderType>();
+    public void onInitMessagesTabComposeMail(UserDetail recipient, String action) {
+        Storage.setCurrentlyLoadedView(null);
+        this.action = action;
 
-    public void onInitMessagesTabModuleInbox(SearchModuleDataHolder filter) {
-        this.init();
-        Storage.setCurrentlyLoadedView("messagesTabInbox");
-        eventBus.getInboxMessages(Storage.getUser().getUserId(), filter);
-    }
-
-    public void onInitMessagesTabModuleSent(SearchModuleDataHolder filter) {
-        this.init();
-        Storage.setCurrentlyLoadedView("messagesTabSent");
-        eventBus.getSentMessages(Storage.getUser().getUserId(), filter);
-    }
-
-    public void onInitMessagesTabModuleTrash(SearchModuleDataHolder filter) {
-        this.init();
-        Storage.setCurrentlyLoadedView("messagesTabTrash");
-        eventBus.getDeletedMessages(Storage.getUser().getUserId(), filter);
-    }
-
-    public void onDisplayMessages(List<UserMessageDetail> messages) {
-        List<UserMessageDetail> list = view.getDataProvider().getList();
-        list.clear();
-        for (UserMessageDetail d : messages) {
-            list.add(d);
+        if (recipient == null) {
+            //TODO Martin Uzivatel musi vybrat uzivatela z kontaktov
+        } else {
+            //Ak forwardnuty z kliku na nejakeho uzivatela, uzivatel sa automaticky nastavy ako recipient
+            view.getRecipientTextBox().setValue(recipient.getUserId().toString());
+            view.getRecipientTextBox().setText(recipient.getEmail());
         }
 
-        view.getDataProvider().refresh();
+        view.getWidgetView().setStyleName(Storage.RSCS.common().userContent());
+        eventBus.displayMain(view.getWidgetView());
     }
-
-    /**
-     * DEVEL METHOD
-     *
-     * Used for JRebel correct refresh. It is called from DemandModulePresenter, when removing instance of
-     * SupplierListPresenter. it has to remove it's detailWrapper first.
-     */
-    public void develRemoveDetailWrapper() {
-        detailSection.develRemoveReplyWidget();
-        eventBus.removeHandler(detailSection);
-    }
-
-    /**
-     * Response method for onInitSupplierList()
-     * @param data
-     */
-//    public void onResponseSupplierNewDemands(ArrayList<UserMessageDetail> data) {
-//        GWT.log("++ onResponseSupplierNewDemands");
-//
-//        List<UserMessageDetail> list = view.getDataProvider().getList();
-//        list.clear();
-//        for (UserMessageDetail d : data) {
-//            list.add(d);
-//        }
-//        view.getDataProvider().refresh();
-//    }
-    //call eventBus to update READ status
-    //called in ClickEvent of action button.
-    public void updateReadStatus(List<Long> selectedIdList, boolean newStatus) {
-        eventBus.requestReadStatusUpdate(selectedIdList, newStatus);
-    }
-
-    /**
-     * Triggered by action button: read/unread button
-     * When changing read of multiple demands by action button. Visible change has to be done manually;
-     *
-     * @param isRead
-     */
-    private void internalReadUpdate(boolean isRead) {
-        Iterator<UserMessageDetail> it = view.getSelectedMessageList().iterator();
-        while (it.hasNext()) {
-            UserMessageDetail message = it.next();
-            message.setRead(isRead);
-        }
-        view.getDataProvider().refresh();
-        view.getGrid().redraw();
-    }
-
-    /**
-     * Call eventBus to update STARRED status.
-     * T
-     * his method is called by clicking star image on single demand by default. Also is called in ClickEvent of
-     * action button.
-     * @param list
-     * @param newStatus
-     */
-    public void updateStarStatus(List<Long> list, boolean newStatus) {
-        eventBus.requestStarStatusUpdate(list, newStatus);
-    }
-
-    /**
-     * Triggered by action button: star/unstar buttons
-     * when starring multiple demands by action button. Visible change has to be done manually;
-     *
-     * @param isStared
-     */
-    private void internalStarUpdate(boolean isStared) {
-        Iterator<UserMessageDetail> it = view.getSelectedMessageList().iterator();
-        while (it.hasNext()) {
-            UserMessageDetail message = it.next();
-            message.setStarred(isStared);
-        }
-        view.getDataProvider().refresh();
-        view.getGrid().redraw();
-    }
-
-    /**
-     * New data are fetched from db.
-     *
-     * @param demandId ID for demand detail
-     * @param messageId ID for demand related conversation
-     * @param userMessageId ID for demand related conversation
-     */
-    public void displayConversation(Long threadRootId, Long subRootId) {
-        //TODO
-        //copy role check from old implementation
-        //
-        //
-
-        //can be solved by enum in future or can be accesed from storage class
-//        detailSection.showLoading(DevelDetailWrapperPresenter.DETAIL);
-//        eventBus.requestDemandDetail(demandId, type);
-
-        //add conversation loading events and so on
-        detailSection.showLoading(DevelDetailWrapperPresenter.CHAT);
-        eventBus.requestConversation(threadRootId, subRootId);
-//        eventBus.requestConversation(124L, 124L);
-
-        //init default replyWidget
-        //it is initalized now, because we do not need to have it visible before first demand selection
-        detailSection.initReplyWidget();
-    }
-
-    public void onSendMessageResponse(MessageDetail sentMessage, ViewType handlingType) {
-        //neccessary check for method to be executed only in appropriate presenter
-        if (type.equals(handlingType)) {
-            detailSection.addConversationMessage(sentMessage);
-        }
-    }
+    private final Map<String, OrderType> orderColumns = new HashMap<String, OrderType>();
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperPresenter.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperPresenter.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperPresenter.java	(working copy)
@@ -4,6 +4,8 @@
 
 import com.google.gwt.event.dom.client.ClickEvent;
 import com.google.gwt.event.dom.client.ClickHandler;
+import com.google.gwt.user.client.ui.Button;
+import com.google.gwt.user.client.ui.IsWidget;
 import com.google.gwt.user.client.ui.SimplePanel;
 import com.google.gwt.user.client.ui.Widget;
 import com.mvp4g.client.annotation.Presenter;
@@ -12,19 +14,18 @@
 
 import cz.poptavka.sample.client.main.Storage;
 import cz.poptavka.sample.client.user.messages.MessagesModuleEventBus;
-import cz.poptavka.sample.client.user.widget.messaging.DevelOfferQuestionPresenter;
+import cz.poptavka.sample.client.user.widget.messaging.OfferQuestionPresenter;
 import cz.poptavka.sample.client.user.widget.messaging.UserConversationPanel;
 import cz.poptavka.sample.shared.domain.message.MessageDetail;
 import cz.poptavka.sample.shared.domain.type.ViewType;
 
 @Presenter(view = ConversationWrapperView.class, multiple = true)
-public class ConversationWrapperPresenter extends
-        LazyPresenter<ConversationWrapperPresenter.IDetailWrapper, MessagesModuleEventBus> {
+public class ConversationWrapperPresenter extends LazyPresenter<ConversationWrapperPresenter.IDetailWrapper, MessagesModuleEventBus> {
 
     public static final int DETAIL = 0;
     public static final int CHAT = 1;
 
-    public interface IDetailWrapper extends LazyView {
+    public interface IDetailWrapper extends LazyView, IsWidget {
 
         Widget getWidgetView();
 
@@ -35,10 +36,65 @@
 
 //        void toggleDemandLoading();
         void toggleConversationLoading();
+        
+        Button getReplyBtn();
 
         void setChat(ArrayList<MessageDetail> chatMessages);
     }
+
+
+    @Override
+    public void bindView() {
+        view.getReplyBtn().addClickHandler(new ClickHandler() {
+
+            @Override
+            public void onClick(ClickEvent event) {
+                ComposeMessagePresenter composer = eventBus.addHandler(ComposeMessagePresenter.class);
+                composer.onInitMessagesTabComposeMail(null, null);
+//                eventBus.initMessagesTabComposeMail(null, null);
+            }
+        });
+    }
+
+    /**
+     * New data are fetched from db.
+     *
+     * @param demandId ID for demand detail
+     * @param messageId ID for demand related conversation
+     * @param userMessageId ID for demand related conversation
+     */
+    public void onDisplayConversation(Long threadRootId, Long subRootId) {
+        //TODO
+        //copy role check from old implementation
+        //
+        //
+
+        //can be solved by enum in future or can be accesed from storage class
+//        detailSection.showLoading(DevelDetailWrapperPresenter.DETAIL);
+//        eventBus.requestDemandDetail(demandId, type);
+
+        //add conversation loading events and so on
+        eventBus.displayDetail(view.getWidgetView());
+        this.showLoading(CHAT);
+//        this.initReplyWidget();
+        eventBus.requestConversation(threadRootId, subRootId);
+
+
+//        eventBus.requestConversation(124L, 124L);
+
+        //init default replyWidget
+        //it is initalized now, because we do not need to have it visible before first demand selection
+        
+    }
+
+    public void onSendMessageResponse(MessageDetail sentMessage, ViewType handlingType) {
+        //neccessary check for method to be executed only in appropriate presenter
+        if (type.equals(handlingType)) {
+            this.addConversationMessage(sentMessage);
+        }
+    }
     private ViewType type;
+
     /**
      * TODO.
      * IMPORTANT ..... NEED TO BE DISCUSSED
@@ -49,7 +105,7 @@
      * - enabling replyWidget after message sending
      * - ... more to come?
      */
-    private DevelOfferQuestionPresenter offerQuestionReply = null;
+    private OfferQuestionPresenter offerQuestionReply = null;
 //
 //    private OfferQuestionPresenter potentialViewReplyWiget = null;
 //    private QuestionPresenter myDemandsViewReplyWiget = null;
@@ -69,6 +125,7 @@
         }
     }
 
+
     /**
      * Initialize widget and sets his type.
      *
@@ -82,28 +139,19 @@
         this.type = viewType;
     }
 
+
     /**
      * Initializes reply widget, when first demand is clicked.
      */
     public void initReplyWidget() {
         if (offerQuestionReply == null) {
-            offerQuestionReply = eventBus.addHandler(DevelOfferQuestionPresenter.class);
+            offerQuestionReply = eventBus.addHandler(OfferQuestionPresenter.class);
         }
         offerQuestionReply.initReplyWindow(view.getReplyHolder());
     }
 
+   
     /**
-     * Response method for fetching demandDetail.
-     *
-     * @param demandDetail detail to be displayed
-     */
-//    public void onResponseDemandDetail(FullDemandDetail demandDetail, ViewType wrapperType) {
-//        //neccessary check for method to be executed only in appropriate presenter
-//        if (type.equals(wrapperType)) {
-//            view.setDetail(demandDetail);
-//        }
-//    }
-    /**
      * Response method for fetching demand-related chat.
      * Internally creates clickHandler for ReplyWidgets submit button.
      *
@@ -113,11 +161,11 @@
     public void onResponseConversation(ArrayList<MessageDetail> chatMessages, ViewType wrapperType) {
         //neccessary check for method to be executed only in appropriate presenter
 //        if (type.equals(wrapperType)) {
-        //display chat
-        //boolean param - for collapsed conversation can be fetched from UserDetail object (some kind of setting)
-        view.setChat(chatMessages);
-        //init replyWidget
-        offerQuestionReply.addSubmitHandler(bindReplyWindowAction());
+            //display chat
+            //boolean param - for collapsed conversation can be fetched from UserDetail object (some kind of setting)
+            view.setChat(chatMessages);
+            //init replyWidget
+//            offerQuestionReply.addSubmitHandler(bindReplyWindowAction());
 //        }
     }
 
@@ -141,7 +189,7 @@
                         MessageDetail messageToSend = offerQuestionReply.getCreatedMessage();
                         messageToSend = view.getConversationPanel().updateSendingMessage(messageToSend);
                         messageToSend.setSenderId(Storage.getUser().getUserId());
-                        eventBus.sendMessage(messageToSend, type);
+                        eventBus.sendMessage(messageToSend, "composeReply");
 //                        Window.alert(messageToSend.getMessageId() + "");
                     } else {
                         // TODO
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessageView.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessageView.java	(revision 855)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/ComposeMessageView.java	(working copy)
@@ -1,37 +1,20 @@
 package cz.poptavka.sample.client.user.messages.tab;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Date;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
-
-import com.google.gwt.cell.client.FieldUpdater;
-import com.google.gwt.cell.client.ValueUpdater;
 import com.google.gwt.core.client.GWT;
-import com.google.gwt.dom.client.Style.Unit;
-import com.google.gwt.safehtml.shared.SafeHtmlUtils;
 import com.google.gwt.uibinder.client.UiBinder;
 import com.google.gwt.uibinder.client.UiField;
-import com.google.gwt.user.cellview.client.Column;
-import com.google.gwt.user.cellview.client.Header;
-import com.google.gwt.user.cellview.client.SimplePager;
-import com.google.gwt.user.cellview.client.SimplePager.TextLocation;
 import com.google.gwt.user.client.ui.Button;
 import com.google.gwt.user.client.ui.Composite;
-import com.google.gwt.user.client.ui.SimplePanel;
+import com.google.gwt.user.client.ui.HTMLPanel;
+import com.google.gwt.user.client.ui.TextArea;
+import com.google.gwt.user.client.ui.TextBox;
 import com.google.gwt.user.client.ui.Widget;
-import com.google.gwt.view.client.DefaultSelectionEventManager;
-import com.google.gwt.view.client.ListDataProvider;
-import com.google.gwt.view.client.MultiSelectionModel;
-import com.google.gwt.view.client.SelectionModel;
-import com.mvp4g.client.view.ReverseViewInterface;
 
-import cz.poptavka.sample.client.main.Storage;
-import cz.poptavka.sample.client.user.messages.tab.MessageListPresenter.IListM;
-import cz.poptavka.sample.shared.domain.message.UserMessageDetail;
 
+import com.mvp4g.client.view.ReverseViewInterface;
+import cz.poptavka.sample.client.user.messages.tab.ComposeMessagePresenter.IComposeMessage;
+import cz.poptavka.sample.shared.domain.message.MessageDetail;
+
 /**
  * IMPORTANT NOTE: This view is ReverseView. Because of eventBus calls from dataGrid table and these event calls are
  * defined in view, not in presenter.
@@ -39,58 +22,52 @@
  * @author beho
  *
  */
-public class MessageList extends Composite implements ReverseViewInterface<MessageListPresenter>, IListM {
+public class ComposeMessageView extends Composite implements ReverseViewInterface<ComposeMessagePresenter>, IComposeMessage {
+//extends ReverseCompositeView<IComposeMessagePresenter> implements IComposeMessage {
 
-    private static MessageListUiBinder uiBinder = GWT.create(MessageListUiBinder.class);
+    private static ComposeMessageViewUiBinder uiBinder = GWT.create(ComposeMessageViewUiBinder.class);
 
-    interface MessageListUiBinder extends UiBinder<Widget, MessageList> {
+    interface ComposeMessageViewUiBinder extends UiBinder<Widget, ComposeMessageView> {
     }
     //attrribute preventing repeated loading of demand detail, when clicked on the same demand
-    private long lastOpenedDemand = -1;
+    private long lastSelectedMail = -1;
     //table handling buttons
     @UiField
-    Button readBtn, unreadBtn, starBtn, unstarBtn;
-    //DataGridattributes
-    @UiField(provided = true)
-    MessageListGrid<UserMessageDetail> demandGrid;
-    @UiField(provided = true)
-    SimplePager pager;
+    Button sendBtn, discardBtn;
+    @UiField
+    TextBox recipient, subject;
+    @UiField
+    TextArea body;
+    @UiField
+    HTMLPanel wrapper;
     //presenter
-    private MessageListPresenter presenter;
+    private ComposeMessagePresenter presenter;
     //detailWrapperPanel
-    @UiField
-    SimplePanel wrapperPanel;
+    @Override
+    public ComposeMessagePresenter getPresenter() {
+        return presenter;
+    }
 
     @Override
-    public void setPresenter(MessageListPresenter presenter) {
+    public void setPresenter(ComposeMessagePresenter presenter) {
         this.presenter = presenter;
     }
 
+    public MessageDetail getMessage() {
+        MessageDetail detail = new MessageDetail();
+        detail.setSenderId(Long.parseLong(recipient.getValue()));
+        detail.setSubject(subject.getText());
+        detail.setBody(body.getText());
+        return detail;
+    }
+
     @Override
-    public MessageListPresenter getPresenter() {
-        return presenter;
+    public TextBox getRecipientTextBox() {
+        return recipient;
     }
 
     @Override
     public void createView() {
-        //load custom grid cssStyle
-        Storage.RSCS.grid().ensureInjected();
-        //demandGrid init
-        demandGrid = new MessageListGrid<UserMessageDetail>(UserMessageDetail.KEY_PROVIDER);
-        // Add a selection model so we can select cells.
-        final SelectionModel<UserMessageDetail> selectionModel =
-                new MultiSelectionModel<UserMessageDetail>(UserMessageDetail.KEY_PROVIDER);
-        demandGrid.setSelectionModel(selectionModel,
-                DefaultSelectionEventManager.<UserMessageDetail>createCheckboxManager());
-
-        //init table
-        initTableColumns(selectionModel);
-
-        // Create a Pager to control the table.
-        SimplePager.Resources pagerResources = GWT.create(SimplePager.Resources.class);
-        pager = new SimplePager(TextLocation.CENTER, pagerResources, false, 0, true);
-        pager.setDisplay(demandGrid);
-
         initWidget(uiBinder.createAndBindUi(this));
     }
 
@@ -100,173 +77,17 @@
     }
 
     @Override
-    public MessageListGrid<UserMessageDetail> getGrid() {
-        return demandGrid;
+    public Button getSendBtn() {
+        return sendBtn;
     }
 
     @Override
-    public ListDataProvider<UserMessageDetail> getDataProvider() {
-        return demandGrid.getDataProvider();
+    public Button getDiscardBtn() {
+        return discardBtn;
     }
 
-    /**
-     * Create all columns to the grid and define click actions.
-     */
-    public void initTableColumns(final SelectionModel<UserMessageDetail> selectionModel) {
-        //init column factory
-        MessageColumnFactory<UserMessageDetail> factory = new MessageColumnFactory<UserMessageDetail>();
-
-// **** definition of all needed FieldUpdaters
-        //TEXT FIELD UPDATER create common demand display fieldUpdater for demand and related conversation display
-        FieldUpdater<UserMessageDetail, String> action = new FieldUpdater<UserMessageDetail, String>() {
-            @Override
-            public void update(int index, UserMessageDetail object, String value) {
-                MessageTableDisplay obj = (MessageTableDisplay) object;
-                object.setRead(true);
-                demandGrid.redraw();
-                presenter.displayConversation(object.getMessageDetail()
-                        .getThreadRootId(), object.getMessageDetail().getMessageId());
-            }
-        };
-//        //DATE FIELD UPDATER displaying of demand detail. The fieldUpdater 'action' cannot be used,
-//        //because this is working with Date instead of String
-        FieldUpdater<UserMessageDetail, Date> dateAction = new FieldUpdater<UserMessageDetail, Date>() {
-
-            @Override
-            public void update(int index, UserMessageDetail object,
-                    Date value) {
-                //for pure display detail action
-                presenter.displayConversation(object.getMessageDetail()
-                        .getThreadRootId(), object.getMessageDetail().getMessageId());
-            }
-        };
-
-        //STAR COLUMN FIELD UPDATER
-        FieldUpdater<UserMessageDetail, Boolean> starUpdater = new FieldUpdater<UserMessageDetail, Boolean>() {
-
-            @Override
-            public void update(int index, UserMessageDetail object, Boolean value) {
-                MessageTableDisplay obj = (MessageTableDisplay) object;
-                object.setStarred(!value);
-                demandGrid.redraw();
-                Long[] item = new Long[]{object.getId()};
-                presenter.updateStarStatus(Arrays.asList(item), !value);
-            }
-        };
-
-// **** ROW selection column and set it's width to 40px.
-        //contains custom header providing selecting all visible items
-        final Header<Boolean> header = factory.createCheckBoxHeader();
-        //select
-        header.setUpdater(new ValueUpdater<Boolean>() {
-
-            @Override
-            public void update(Boolean value) {
-                List<UserMessageDetail> rows = demandGrid.getVisibleItems();
-                for (UserMessageDetail row : rows) {
-                    selectionModel.setSelected(row, value);
-                }
-
-            }
-        });
-        demandGrid.addColumn(factory.createCheckboxColumn(selectionModel), header);
-        demandGrid.setColumnWidth(demandGrid.getColumn(MessageColumnFactory.COL_ZERO),
-                MessageColumnFactory.WIDTH_40, Unit.PX);
-
-// **** Star collumn with defined valueUpdater and custom style
-        Column<UserMessageDetail, Boolean> starColumn = factory.createStarColumn();
-        starColumn.setFieldUpdater(starUpdater);
-        //TODO
-        //testing if assigning style in MessageColumnFactory works - works well 7.11.11 Beho
-        //but keep here for reference
-        //starColumn.setCellStyleNames(Storage.RSCS.grid().cellTableHandCursor());
-        demandGrid.setColumnWidth(starColumn, MessageColumnFactory.WIDTH_40, Unit.PX);
-        demandGrid.addColumn(starColumn, SafeHtmlUtils.fromSafeConstant("<br/>"));
-
-// **** user column
-        Column<UserMessageDetail, String> userCol = factory.createUserColumn(demandGrid.getSortHandler());
-        userCol.setFieldUpdater(action);
-        //TODO i18
-//        demandGrid.addColumn(userCol, Storage.MSGS.title());
-        demandGrid.addColumn(userCol, "Od koho");
-
-// **** subject column
-        Column<UserMessageDetail, String> subjectCol = factory.createSubjectColumn(demandGrid.getSortHandler(), true);
-        subjectCol.setFieldUpdater(action);
-//        demandGrid.addColumn(subjectCol, Storage.MSGS.client());
-        demandGrid.addColumn(subjectCol, "Predmet");
-
-
-//// **** urgent column
-//        Column<UserMessageDetail, Date> urgentCol = factory.createUrgentColumn(demandGrid.getSortHandler());
-//        urgentCol.setFieldUpdater(dateAction);
-//        //TODO
-//        //example width, can be different
-//        //widths shall be set automatically in
-//        demandGrid.setColumnWidth(urgentCol, 60, Unit.PX);
-//        demandGrid.addColumn(urgentCol, Storage.MSGS.urgency());
-//
-//// **** client rating column
-//        Column<UserMessageDetail, String> ratingCo = factory.createClientRatingColumn(demandGrid.getSortHandler());
-//        ratingCo.setFieldUpdater(action);
-//        //TODO
-//        //implement img header
-//        demandGrid.addColumn(ratingCo, "img");
-
-//// **** demand price column
-//        Column<UserMessageDetail, String> priceCol = factory.createPriceColumn(demandGrid.getSortHandler());
-//        priceCol.setFieldUpdater(action);
-//        demandGrid.addColumn(priceCol, Storage.MSGS.price());
-
-// **** creationDate column
-        Column<UserMessageDetail, Date> creationCol =
-                factory.createDateColumn(demandGrid.getSortHandler(), MessageColumnFactory.DATE_CREATED);
-        creationCol.setFieldUpdater(dateAction);
-        demandGrid.addColumn(creationCol, Storage.MSGS.createdDate());
-
-    }
-
     @Override
-    public Button getReadBtn() {
-        return readBtn;
+    public HTMLPanel getWrapperPanel() {
+        return wrapper;
     }
-
-    @Override
-    public Button getUnreadBtn() {
-        return unreadBtn;
-    }
-
-    @Override
-    public Button getStarBtn() {
-        return starBtn;
-    }
-
-    @Override
-    public Button getUnstarBtn() {
-        return unstarBtn;
-    }
-
-    @Override
-    public List<Long> getSelectedIdList() {
-        List<Long> idList = new ArrayList<Long>();
-        Set<UserMessageDetail> set = getSelectedMessageList();
-        Iterator<UserMessageDetail> it = set.iterator();
-        while (it.hasNext()) {
-            idList.add(it.next().getId());
-        }
-        return idList;
-    }
-
-    @SuppressWarnings("unchecked")
-    @Override
-    public Set<UserMessageDetail> getSelectedMessageList() {
-        MultiSelectionModel<UserMessageDetail> model =
-                (MultiSelectionModel<UserMessageDetail>) demandGrid.getSelectionModel();
-        return model.getSelectedSet();
-    }
-
-    @Override
-    public SimplePanel getWrapperPanel() {
-        return wrapperPanel;
-    }
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperView.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperView.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/ConversationWrapperView.java	(working copy)
@@ -7,6 +7,7 @@
 import com.google.gwt.event.dom.client.ClickHandler;
 import com.google.gwt.uibinder.client.UiBinder;
 import com.google.gwt.uibinder.client.UiField;
+import com.google.gwt.user.client.ui.Button;
 import com.google.gwt.user.client.ui.Composite;
 import com.google.gwt.user.client.ui.HTMLPanel;
 import com.google.gwt.user.client.ui.SimplePanel;
@@ -26,6 +27,7 @@
     @UiField ClickableDiv conversationHeader;
     @UiField UserConversationPanel conversationPanel;
     @UiField SimplePanel replyHolder;
+    @UiField Button replyBtn;
 
     @Override
     public void createView() {
@@ -87,4 +89,9 @@
         conversationHeader.toggleLoading();
     }
 
+    @Override
+    public Button getReplyBtn() {
+        return replyBtn;
+    }
+
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageListPresenter.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageListPresenter.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageListPresenter.java	(working copy)
@@ -1,28 +1,31 @@
 package cz.poptavka.sample.client.user.messages.tab;
 
-
+import com.google.gwt.cell.client.FieldUpdater;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 
 import com.google.gwt.event.dom.client.ClickEvent;
 import com.google.gwt.event.dom.client.ClickHandler;
+import com.google.gwt.user.cellview.client.Column;
 import com.google.gwt.user.client.ui.Button;
-import com.google.gwt.user.client.ui.SimplePanel;
+import com.google.gwt.user.client.ui.IsWidget;
 import com.google.gwt.user.client.ui.Widget;
 import com.google.gwt.view.client.ListDataProvider;
 import com.mvp4g.client.annotation.Presenter;
+
+
+
+
 import com.mvp4g.client.presenter.LazyPresenter;
+
 import com.mvp4g.client.view.LazyView;
-
 import cz.poptavka.sample.client.main.Storage;
 import cz.poptavka.sample.client.main.common.search.SearchModuleDataHolder;
 import cz.poptavka.sample.client.user.messages.MessagesModuleEventBus;
-import cz.poptavka.sample.client.user.widget.DevelDetailWrapperPresenter;
 import cz.poptavka.sample.domain.common.OrderType;
-import cz.poptavka.sample.shared.domain.message.MessageDetail;
 import cz.poptavka.sample.shared.domain.message.UserMessageDetail;
-import cz.poptavka.sample.shared.domain.type.ViewType;
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -30,7 +33,7 @@
 @Presenter(view = MessageList.class, multiple = true)
 public class MessageListPresenter extends LazyPresenter<MessageListPresenter.IListM, MessagesModuleEventBus> {
 
-    public interface IListM extends LazyView {
+    public interface IListM extends LazyView, IsWidget {
 
         Widget getWidgetView();
 
@@ -43,24 +46,32 @@
 
         Button getUnstarBtn();
 
+        Button getDeleteBtn();
+
         //table getters
         MessageListGrid<UserMessageDetail> getGrid();
 
         ListDataProvider<UserMessageDetail> getDataProvider();
 
+        Column<UserMessageDetail, String> getCreationCol();
+
+        Column<UserMessageDetail, Boolean> getStarColumn();
+
+        Column<UserMessageDetail, String> getSubjectCol();
+
+        Column<UserMessageDetail, String> getUserCol();
+
         List<Long> getSelectedIdList();
 
         Set<UserMessageDetail> getSelectedMessageList();
-
-        //detail wrapper
-        SimplePanel getWrapperPanel();
     }
     //viewType
-    private ViewType type = ViewType.POTENTIAL;
-    private ConversationWrapperPresenter detailSection = null;
+//    private ViewType type = ViewType.POTENTIAL;
+//    private ConversationWrapperPresenter detailSection = null;
     //remove this annotation for production
     @SuppressWarnings("unused")
     private boolean initialized = false;
+    private ConversationWrapperPresenter detailSection = null;
 
     /** Defines button actions. */
     @Override
@@ -97,6 +108,66 @@
                 updateStarStatus(view.getSelectedIdList(), false);
             }
         });
+        view.getDeleteBtn().addClickHandler(new ClickHandler() {
+
+            @Override
+            public void onClick(ClickEvent event) {
+                eventBus.deleteMessages(view.getSelectedIdList());
+            }
+        });
+        view.getUserCol().setFieldUpdater(new FieldUpdater<UserMessageDetail, String>() {
+
+            @Override
+            public void update(int index, UserMessageDetail object, String value) {
+//                MessageTableDisplay obj = (MessageTableDisplay) object;
+                object.setRead(true);
+                eventBus.requestReadStatusUpdate(Arrays.asList(object.getId()), true);
+                view.getGrid().redraw();
+                if (detailSection == null) {
+                    detailSection = eventBus.addHandler(ConversationWrapperPresenter.class);
+                }
+                eventBus.displayConversation(object.getMessageDetail().getThreadRootId(), object.getMessageDetail().getMessageId());
+            }
+        });
+        view.getSubjectCol().setFieldUpdater(new FieldUpdater<UserMessageDetail, String>() {
+
+            @Override
+            public void update(int index, UserMessageDetail object, String value) {
+//                MessageTableDisplay obj = (MessageTableDisplay) object;
+                object.setRead(true);
+                eventBus.requestReadStatusUpdate(Arrays.asList(object.getId()), true);
+                if (detailSection == null) {
+                    detailSection = eventBus.addHandler(ConversationWrapperPresenter.class);
+                }
+                eventBus.displayConversation(object.getMessageDetail().getThreadRootId(), object.getMessageDetail().getMessageId());
+            }
+        });
+        view.getCreationCol().setFieldUpdater(new FieldUpdater<UserMessageDetail, String>() {
+
+            @Override
+            public void update(int index, UserMessageDetail object,
+                    String value) {
+                object.setRead(true);
+                eventBus.requestReadStatusUpdate(Arrays.asList(object.getId()), true);
+                if (detailSection == null) {
+                    detailSection = eventBus.addHandler(ConversationWrapperPresenter.class);
+                }
+                //for pure display detail action
+                eventBus.displayConversation(object.getMessageDetail().getThreadRootId(), object.getMessageDetail().getMessageId());
+            }
+        });
+
+        view.getStarColumn().setFieldUpdater(new FieldUpdater<UserMessageDetail, Boolean>() {
+
+            @Override
+            public void update(int index, UserMessageDetail object, Boolean value) {
+//                MessageTableDisplay obj = (MessageTableDisplay) object;
+                object.setStarred(!value);
+                view.getGrid().redraw();
+                Long[] item = new Long[]{object.getId()};
+                eventBus.requestStarStatusUpdate(Arrays.asList(item), !value);
+            }
+        });
     }
 
     /**
@@ -115,12 +186,12 @@
 //
         Storage.setCurrentlyLoadedView("messagesTab");
         view.getWidgetView().setStyleName(Storage.RSCS.common().userContent());
-        eventBus.displayView(view.getWidgetView());
+        eventBus.displayMain(view.getWidgetView());
         //init wrapper widget
-        if (detailSection == null) {
-            detailSection = eventBus.addHandler(ConversationWrapperPresenter.class);
-            detailSection.initDetailWrapper(view.getWrapperPanel(), type);
-        }
+//        if (detailSection == null) {
+//            detailSection = eventBus.addHandler(ConversationWrapperPresenter.class);
+//            detailSection.initDetailWrapper(view.getWrapper(), type);
+//        }
         initialized = true;
     }
     private final Map<String, OrderType> orderColumns = new HashMap<String, OrderType>();
@@ -128,7 +199,9 @@
     public void onInitMessagesTabModuleInbox(SearchModuleDataHolder filter) {
         this.init();
         Storage.setCurrentlyLoadedView("messagesTabInbox");
-        eventBus.getInboxMessages(Storage.getUser().getUserId(), filter);
+        //ked kolki opravi svoje opravit aj toto
+//        eventBus.getInboxMessages(Storage.getUser().getUserId(), filter);
+        eventBus.getInboxMessages(149L, filter);
     }
 
     public void onInitMessagesTabModuleSent(SearchModuleDataHolder filter) {
@@ -159,11 +232,10 @@
      * Used for JRebel correct refresh. It is called from DemandModulePresenter, when removing instance of
      * SupplierListPresenter. it has to remove it's detailWrapper first.
      */
-    public void develRemoveDetailWrapper() {
-        detailSection.develRemoveReplyWidget();
-        eventBus.removeHandler(detailSection);
-    }
-
+//    public void develRemoveDetailWrapper() {
+//        detailSection.develRemoveReplyWidget();
+//        eventBus.removeHandler(detailSection);
+//    }
     /**
      * Response method for onInitSupplierList()
      * @param data
@@ -227,38 +299,4 @@
         view.getDataProvider().refresh();
         view.getGrid().redraw();
     }
-
-    /**
-     * New data are fetched from db.
-     *
-     * @param demandId ID for demand detail
-     * @param messageId ID for demand related conversation
-     * @param userMessageId ID for demand related conversation
-     */
-    public void displayConversation(Long threadRootId, Long subRootId) {
-        //TODO
-        //copy role check from old implementation
-        //
-        //
-
-        //can be solved by enum in future or can be accesed from storage class
-//        detailSection.showLoading(DevelDetailWrapperPresenter.DETAIL);
-//        eventBus.requestDemandDetail(demandId, type);
-
-        //add conversation loading events and so on
-        detailSection.showLoading(DevelDetailWrapperPresenter.CHAT);
-        eventBus.requestConversation(threadRootId, subRootId);
-//        eventBus.requestConversation(124L, 124L);
-
-        //init default replyWidget
-        //it is initalized now, because we do not need to have it visible before first demand selection
-        detailSection.initReplyWidget();
-    }
-
-    public void onSendMessageResponse(MessageDetail sentMessage, ViewType handlingType) {
-        //neccessary check for method to be executed only in appropriate presenter
-        if (type.equals(handlingType)) {
-            detailSection.addConversationMessage(sentMessage);
-        }
-    }
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageColumnFactory.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageColumnFactory.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageColumnFactory.java	(working copy)
@@ -1,10 +1,10 @@
 package cz.poptavka.sample.client.user.messages.tab;
 
 import java.util.Comparator;
-import java.util.Date;
 
 import com.google.gwt.cell.client.CheckboxCell;
 import com.google.gwt.cell.client.ClickableTextCell;
+import com.google.gwt.i18n.client.DateTimeFormat;
 import com.google.gwt.safehtml.shared.SafeHtml;
 import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
 import com.google.gwt.safehtml.shared.SafeHtmlUtils;
@@ -15,8 +15,10 @@
 import com.google.gwt.view.client.SelectionModel;
 
 import cz.poptavka.sample.client.main.Storage;
-import cz.poptavka.sample.client.user.widget.grid.cell.ClickableDateCell;
 import cz.poptavka.sample.client.user.widget.grid.cell.StarCell;
+import cz.poptavka.sample.shared.domain.message.MessageDetail;
+import java.text.Format;
+import java.text.SimpleDateFormat;
 
 /**
  * Factory class for creating DataGrid columns including optional sorting ability.
@@ -127,7 +129,7 @@
             @Override
             public String getValue(T object) {
                 MessageTableDisplay obj = (MessageTableDisplay) object;
-                return obj.getSenderEmail();
+                return MessageDetail.displayHtml(obj.getSenderEmail(), obj.isRead());
             }
         });
         if (sortHandler != null) {
@@ -137,8 +139,8 @@
                 @Override
                 public int compare(T o1, T o2) {
 
-                    return ((MessageTableDisplay) o1).getSenderEmail()
-                            .compareTo(((MessageTableDisplay) o2).getSenderEmail());
+                    return ((MessageTableDisplay) o1).getSenderEmail().compareTo(
+                            ((MessageTableDisplay) o2).getSenderEmail());
                 }
             });
         }
@@ -165,9 +167,10 @@
             public String getValue(T object) {
                 MessageTableDisplay obj = (MessageTableDisplay) object;
                 if (displayMessages) {
-                    return obj.getMessageDetail().getSubject() + " " + obj.getFormattedMessageCount();
+                    return MessageDetail.displayHtml(
+                            obj.getMessageDetail().getSubject() + " " + obj.getFormattedMessageCount(), obj.isRead());
                 } else {
-                    return obj.getMessageDetail().getSubject();
+                    return MessageDetail.displayHtml(obj.getMessageDetail().getSubject(), obj.isRead());
                 }
             }
         };
@@ -195,15 +198,17 @@
      * @param sortHandler
      * @return ratingColumn
      */
-    public Column<T, Date> createDateColumn(ListHandler<T> sortHandler, final int dateType) {
-        Column<T, Date> ratingColumn = new Column<T, Date>(new ClickableDateCell()) {
+    public Column<T, String> createDateColumn(ListHandler<T> sortHandler, final int dateType) {
+        Column<T, String> ratingColumn = new Column<T, String>(tableTextCell) {
 
-            private int type = dateType;
+            private int type = dateType;// ???
 
             @Override
-            public Date getValue(T object) {
+            public String getValue(T object) {
                 MessageTableDisplay obj = (MessageTableDisplay) object;
-                return obj.getMessageDetail().getCreated();
+                return MessageDetail.displayHtml(
+                        DateTimeFormat.getFormat("MM/dd/yy").format(obj.getMessageDetail().getCreated()),
+                        obj.isRead());
             }
         };
         if (sortHandler != null) {
@@ -212,8 +217,8 @@
 
                 @Override
                 public int compare(T o1, T o2) {
-                    return ((MessageTableDisplay) o1).getMessageDetail().getCreated()
-                            .compareTo(((MessageTableDisplay) o2).getMessageDetail().getCreated());
+                    return ((MessageTableDisplay) o1).getMessageDetail().getCreated().compareTo(
+                            ((MessageTableDisplay) o2).getMessageDetail().getCreated());
                 }
             });
         }
Index: src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageList.ui.xml
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageList.ui.xml	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/tab/MessageList.ui.xml	(working copy)
@@ -10,58 +10,44 @@
     <ui:style>
 
     </ui:style>
-    <g:SplitLayoutPanel styleName='{res.layout.fullSize}'>
-        <g:east size="500">
-            <g:SimplePanel ui:field="wrapperPanel">
-                <g:HTMLPanel>
-                    <div>
-                        <strong>Defail detail panel</strong>
-                        <br /><br />
-                        <div>
-                            Default content....can contain some advertisements.
-                        </div>
-                    </div>
-                </g:HTMLPanel>
-            </g:SimplePanel>
-        </g:east>
-        <g:center>
-            <g:DockLayoutPanel unit="EM">
-                <g:north size="5">
-                    <g:HTMLPanel>
-                    <div>
-                        <g:Button ui:field="readBtn">
+   
+    <g:DockLayoutPanel unit="EM">
+        <g:north size="5">
+            <g:HTMLPanel>
+                <div>
+                    <g:Button ui:field="readBtn">
                             Read
-                        </g:Button>
-                        <g:Button ui:field="unreadBtn">
+                    </g:Button>
+                    <g:Button ui:field="unreadBtn">
                             Unread
-                        </g:Button>
-                        <g:Button ui:field="starBtn">
+                    </g:Button>
+                    <g:Button ui:field="starBtn">
                             Star
-                        </g:Button>
-                        <g:Button ui:field="unstarBtn">
+                    </g:Button>
+                    <g:Button ui:field="unstarBtn">
                             Unstar
-                        </g:Button>
-                    </div>
-                    </g:HTMLPanel>
-                </g:north>
-                <g:center>
-                    <s:MessageListGrid ui:field="demandGrid" />
-                </g:center>
-                 <g:south size="3">
-                      <g:HTMLPanel>
-                    <table
-                      style="width:100%">
-                      <tr>
-                        <td
-                          align='center'>
-                          <c:SimplePager
-                            ui:field='pager' />
-                        </td>
-                      </tr>
-                    </table>
-                  </g:HTMLPanel>
-                </g:south>
-            </g:DockLayoutPanel>
+                    </g:Button>
+                    <g:Button ui:field="deleteBtn">
+                            Delete
+                    </g:Button>
+                </div>
+            </g:HTMLPanel>
+        </g:north>
+        <g:center>
+<!--            <g:ScrollPanel>-->
+                <s:MessageListGrid ui:field="messageGrid" />
+<!--            </g:ScrollPanel>-->
         </g:center>
-    </g:SplitLayoutPanel>
+        <g:south size="3">
+            <g:HTMLPanel>
+                <table style="width:100%">
+                    <tr>
+                        <td align='center'>
+                            <c:SimplePager ui:field='pager' />
+                        </td>
+                    </tr>
+                </table>
+            </g:HTMLPanel>
+        </g:south>
+    </g:DockLayoutPanel>
 </ui:UiBinder>
Index: src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleView.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleView.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleView.java	(working copy)
@@ -8,6 +8,7 @@
 import com.google.gwt.user.client.ui.Button;
 import com.google.gwt.user.client.ui.Composite;
 import com.google.gwt.user.client.ui.SimplePanel;
+import com.google.gwt.user.client.ui.SplitLayoutPanel;
 import com.google.gwt.user.client.ui.Widget;
 
 import cz.poptavka.sample.client.resources.StyleResource;
@@ -24,9 +25,11 @@
     private static final Logger LOGGER = Logger.getLogger(MessagesModuleView.class.getName());
 //    @UiField Button myDemandsBtn, offersBtn, createDemandBtn;
     @UiField
-    SimplePanel contentPanel;
+    SimplePanel wrapperMain, wrapperDetail;
     @UiField
-    Button inboxButton, sentButton, trashButton;
+    Button inboxButton, sentButton, trashButton, composeButton;
+    @UiField
+    SplitLayoutPanel splitPanelSouth;
 
     public MessagesModuleView() {
         StyleResource.INSTANCE.common().ensureInjected();
@@ -39,11 +42,21 @@
     }
 
     @Override
-    public void setContent(Widget contentWidget) {
-        contentPanel.setWidget(contentWidget);
+    public SimplePanel getWrapperMain() {
+        return wrapperMain;
     }
 
     @Override
+    public SimplePanel getWrapperDetail() {
+        return wrapperDetail;
+    }
+
+    @Override
+    public Button getComposeButton() {
+        return composeButton;
+    }
+
+    @Override
     public Button getInboxButton() {
         return inboxButton;
     }
@@ -58,6 +71,11 @@
         return trashButton;
     }
 
+    @Override
+    public SplitLayoutPanel getSplitPanel() {
+        return splitPanelSouth;
+    }
+
     /** toggle visible actions/buttons for current user decided by his role. **/
     @Override
     public void setRoleInterface(Role role) {
@@ -74,9 +92,4 @@
                 break;
         }
     }
-
-    @Override
-    public SimplePanel getContentPanel() {
-        return contentPanel;
-    }
 }
Index: src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleEventBus.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleEventBus.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/messages/MessagesModuleEventBus.java	(working copy)
@@ -12,8 +12,10 @@
 import com.mvp4g.client.event.EventBus;
 
 import cz.poptavka.sample.client.main.common.search.SearchModuleDataHolder;
+import cz.poptavka.sample.client.user.messages.tab.ComposeMessagePresenter;
 import cz.poptavka.sample.client.user.messages.tab.ConversationWrapperPresenter;
 import cz.poptavka.sample.client.user.messages.tab.MessageListPresenter;
+import cz.poptavka.sample.shared.domain.UserDetail;
 import cz.poptavka.sample.shared.domain.message.MessageDetail;
 import cz.poptavka.sample.shared.domain.message.UserMessageDetail;
 import cz.poptavka.sample.shared.domain.type.ViewType;
@@ -35,6 +37,8 @@
     @Event(handlers = MessageListPresenter.class, historyConverter = MessagesModuleHistory.class)
     void initMessagesTabModuleTrash(SearchModuleDataHolder searchDataHolder);
 
+    @Event(handlers = ComposeMessagePresenter.class, historyConverter = MessagesModuleHistory.class)
+    void initMessagesTabComposeMail(UserDetail recipient, String action);
 //    @Event(handlers = MessageListPresenter.class)
 //    void initInbox();
 //
@@ -43,20 +47,25 @@
 //
 //    @Event(handlers = MessageListPresenter.class)
 //    void initTrash();
+
     /**************************************************************************/
     /* Business events. */
     /* Business events handled by DemandModulePresenter. */
     //init demands module - left user_type menu and initial content
     @Event(handlers = MessagesModulePresenter.class)
-    void initMessagesModule();
+    void initMessagesModule(String action);
 
     //display widget in content area
     @Event(handlers = MessagesModulePresenter.class)
-    void displayView(Widget content);
+    void displayMain(Widget content);
 
+    @Event(handlers = MessagesModulePresenter.class)
+    void displayDetail(Widget content);
+
     /**************************************************************************/
     @Event(forwardToParent = true)
     void setBodyHolderWidget(IsWidget body);
+
     /**************************************************************************/
     /* Business events. */
     /* Business events handled by ALL VIEW presenters. */
@@ -67,12 +76,11 @@
      * @param type type of handling view
      */
     @Event(handlers = MessagesModuleMessageHandler.class)
-    void sendMessage(MessageDetail messageToSend, ViewType type);
+    void sendMessage(MessageDetail messageToSend, String action);
     //IMPORTANT: all view-resenters have to handle this method, if view handles conversation displaying
 
-    @Event(handlers = MessageListPresenter.class, passive = true)
-    void sendMessageResponse(MessageDetail sentMessage, ViewType type);
-
+//    @Event(handlers = MessageListPresenter.class, passive = true)
+//    void sendMessageResponse(MessageDetail sentMessage, ViewType type);
     @Event(handlers = MessageListPresenter.class)
     void displayMessages(List<UserMessageDetail> messages);
 
@@ -93,6 +101,9 @@
     @Event(handlers = MessagesModuleMessageHandler.class)
     void requestStarStatusUpdate(List<Long> userMessageIdList, boolean newStatus);
 
+    @Event(handlers = MessagesModuleMessageHandler.class)
+    void deleteMessages(List<Long> messagesIds);
+
     /**************************************************************************/
     /* Business events handled by DevelDetailWrapperPresenter. */
 
@@ -114,6 +125,9 @@
      * @param userMessageId
      * @param userId
      */
+    @Event(handlers = ConversationWrapperPresenter.class)
+    void displayConversation(Long threadRootId, Long messageId);
+
     @Event(handlers = MessagesModuleMessageHandler.class)
     void requestConversation(Long threadRootId, Long subRootId);
 
Index: src/main/java/cz/poptavka/sample/client/user/UserEventBus.java
===================================================================
--- src/main/java/cz/poptavka/sample/client/user/UserEventBus.java	(revision 856)
+++ src/main/java/cz/poptavka/sample/client/user/UserEventBus.java	(working copy)
@@ -416,7 +416,7 @@
     // init demands module
 
     @Event(forwardToParent = true)
-    void initMessagesModule();
+    void initMessagesModule(String action);
 
     @Event(forwardToParent = true)
     void initAdminModule(SearchModuleDataHolder filter);
